/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiAcademicWeekReference
    /// </summary>
    [DataContract(Name = "edFi_academicWeekReference")]
    public partial class EdFiAcademicWeekReference : IEquatable<EdFiAcademicWeekReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAcademicWeekReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiAcademicWeekReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAcademicWeekReference" /> class.
        /// </summary>
        /// <param name="schoolId">The identifier assigned to a school. (required).</param>
        /// <param name="weekIdentifier">The school label for the week. (required).</param>
        /// <param name="link">link.</param>
        public EdFiAcademicWeekReference(long schoolId = default(long), string weekIdentifier = default(string), Link link = default(Link))
        {
            this.SchoolId = schoolId;
            // to ensure "weekIdentifier" is required (not null)
            if (weekIdentifier == null)
            {
                throw new ArgumentNullException("weekIdentifier is a required property for EdFiAcademicWeekReference and cannot be null");
            }
            this.WeekIdentifier = weekIdentifier;
            this.Link = link;
        }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        /// <value>The identifier assigned to a school.</value>
        [DataMember(Name = "schoolId", IsRequired = true, EmitDefaultValue = true)]
        public long SchoolId { get; set; }

        /// <summary>
        /// The school label for the week.
        /// </summary>
        /// <value>The school label for the week.</value>
        [DataMember(Name = "weekIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string WeekIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAcademicWeekReference {\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  WeekIdentifier: ").Append(WeekIdentifier).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiAcademicWeekReference);
        }

        /// <summary>
        /// Returns true if EdFiAcademicWeekReference instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiAcademicWeekReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiAcademicWeekReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SchoolId == input.SchoolId ||
                    this.SchoolId.Equals(input.SchoolId)
                ) && 
                (
                    this.WeekIdentifier == input.WeekIdentifier ||
                    (this.WeekIdentifier != null &&
                    this.WeekIdentifier.Equals(input.WeekIdentifier))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SchoolId.GetHashCode();
                if (this.WeekIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.WeekIdentifier.GetHashCode();
                }
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WeekIdentifier (string) maxLength
            if (this.WeekIdentifier != null && this.WeekIdentifier.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WeekIdentifier, length must be less than 80.", new [] { "WeekIdentifier" });
            }

            // WeekIdentifier (string) minLength
            if (this.WeekIdentifier != null && this.WeekIdentifier.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WeekIdentifier, length must be greater than 5.", new [] { "WeekIdentifier" });
            }

            yield break;
        }
    }

}
