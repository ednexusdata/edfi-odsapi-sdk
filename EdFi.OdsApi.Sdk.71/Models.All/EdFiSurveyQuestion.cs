/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiSurveyQuestion
    /// </summary>
    [DataContract(Name = "edFi_surveyQuestion")]
    public partial class EdFiSurveyQuestion : IEquatable<EdFiSurveyQuestion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyQuestion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestion" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="questionCode">The identifying code for the question, unique for the survey. (required).</param>
        /// <param name="surveyReference">surveyReference (required).</param>
        /// <param name="surveySectionReference">surveySectionReference.</param>
        /// <param name="matrices">An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey..</param>
        /// <param name="questionFormDescriptor">The form or type of question. (required).</param>
        /// <param name="questionText">The text of the question. (required).</param>
        /// <param name="responseChoices">An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        public EdFiSurveyQuestion(string id = default(string), string questionCode = default(string), EdFiSurveyReference surveyReference = default(EdFiSurveyReference), EdFiSurveySectionReference surveySectionReference = default(EdFiSurveySectionReference), List<EdFiSurveyQuestionMatrix> matrices = default(List<EdFiSurveyQuestionMatrix>), string questionFormDescriptor = default(string), string questionText = default(string), List<EdFiSurveyQuestionResponseChoice> responseChoices = default(List<EdFiSurveyQuestionResponseChoice>), string etag = default(string), DateTime lastModifiedDate = default(DateTime))
        {
            // to ensure "questionCode" is required (not null)
            if (questionCode == null)
            {
                throw new ArgumentNullException("questionCode is a required property for EdFiSurveyQuestion and cannot be null");
            }
            this.QuestionCode = questionCode;
            // to ensure "surveyReference" is required (not null)
            if (surveyReference == null)
            {
                throw new ArgumentNullException("surveyReference is a required property for EdFiSurveyQuestion and cannot be null");
            }
            this.SurveyReference = surveyReference;
            // to ensure "questionFormDescriptor" is required (not null)
            if (questionFormDescriptor == null)
            {
                throw new ArgumentNullException("questionFormDescriptor is a required property for EdFiSurveyQuestion and cannot be null");
            }
            this.QuestionFormDescriptor = questionFormDescriptor;
            // to ensure "questionText" is required (not null)
            if (questionText == null)
            {
                throw new ArgumentNullException("questionText is a required property for EdFiSurveyQuestion and cannot be null");
            }
            this.QuestionText = questionText;
            this.Id = id;
            this.SurveySectionReference = surveySectionReference;
            this.Matrices = matrices;
            this.ResponseChoices = responseChoices;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifying code for the question, unique for the survey.
        /// </summary>
        /// <value>The identifying code for the question, unique for the survey.</value>
        [DataMember(Name = "questionCode", IsRequired = true, EmitDefaultValue = true)]
        public string QuestionCode { get; set; }

        /// <summary>
        /// Gets or Sets SurveyReference
        /// </summary>
        [DataMember(Name = "surveyReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSurveyReference SurveyReference { get; set; }

        /// <summary>
        /// Gets or Sets SurveySectionReference
        /// </summary>
        [DataMember(Name = "surveySectionReference", EmitDefaultValue = false)]
        public EdFiSurveySectionReference SurveySectionReference { get; set; }

        /// <summary>
        /// An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey.
        /// </summary>
        /// <value>An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey.</value>
        [DataMember(Name = "matrices", EmitDefaultValue = false)]
        public List<EdFiSurveyQuestionMatrix> Matrices { get; set; }

        /// <summary>
        /// The form or type of question.
        /// </summary>
        /// <value>The form or type of question.</value>
        [DataMember(Name = "questionFormDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string QuestionFormDescriptor { get; set; }

        /// <summary>
        /// The text of the question.
        /// </summary>
        /// <value>The text of the question.</value>
        [DataMember(Name = "questionText", IsRequired = true, EmitDefaultValue = true)]
        public string QuestionText { get; set; }

        /// <summary>
        /// An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question.
        /// </summary>
        /// <value>An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question.</value>
        [DataMember(Name = "responseChoices", EmitDefaultValue = false)]
        public List<EdFiSurveyQuestionResponseChoice> ResponseChoices { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyQuestion {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QuestionCode: ").Append(QuestionCode).Append("\n");
            sb.Append("  SurveyReference: ").Append(SurveyReference).Append("\n");
            sb.Append("  SurveySectionReference: ").Append(SurveySectionReference).Append("\n");
            sb.Append("  Matrices: ").Append(Matrices).Append("\n");
            sb.Append("  QuestionFormDescriptor: ").Append(QuestionFormDescriptor).Append("\n");
            sb.Append("  QuestionText: ").Append(QuestionText).Append("\n");
            sb.Append("  ResponseChoices: ").Append(ResponseChoices).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiSurveyQuestion);
        }

        /// <summary>
        /// Returns true if EdFiSurveyQuestion instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiSurveyQuestion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiSurveyQuestion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.QuestionCode == input.QuestionCode ||
                    (this.QuestionCode != null &&
                    this.QuestionCode.Equals(input.QuestionCode))
                ) && 
                (
                    this.SurveyReference == input.SurveyReference ||
                    (this.SurveyReference != null &&
                    this.SurveyReference.Equals(input.SurveyReference))
                ) && 
                (
                    this.SurveySectionReference == input.SurveySectionReference ||
                    (this.SurveySectionReference != null &&
                    this.SurveySectionReference.Equals(input.SurveySectionReference))
                ) && 
                (
                    this.Matrices == input.Matrices ||
                    this.Matrices != null &&
                    input.Matrices != null &&
                    this.Matrices.SequenceEqual(input.Matrices)
                ) && 
                (
                    this.QuestionFormDescriptor == input.QuestionFormDescriptor ||
                    (this.QuestionFormDescriptor != null &&
                    this.QuestionFormDescriptor.Equals(input.QuestionFormDescriptor))
                ) && 
                (
                    this.QuestionText == input.QuestionText ||
                    (this.QuestionText != null &&
                    this.QuestionText.Equals(input.QuestionText))
                ) && 
                (
                    this.ResponseChoices == input.ResponseChoices ||
                    this.ResponseChoices != null &&
                    input.ResponseChoices != null &&
                    this.ResponseChoices.SequenceEqual(input.ResponseChoices)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.QuestionCode != null)
                {
                    hashCode = (hashCode * 59) + this.QuestionCode.GetHashCode();
                }
                if (this.SurveyReference != null)
                {
                    hashCode = (hashCode * 59) + this.SurveyReference.GetHashCode();
                }
                if (this.SurveySectionReference != null)
                {
                    hashCode = (hashCode * 59) + this.SurveySectionReference.GetHashCode();
                }
                if (this.Matrices != null)
                {
                    hashCode = (hashCode * 59) + this.Matrices.GetHashCode();
                }
                if (this.QuestionFormDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.QuestionFormDescriptor.GetHashCode();
                }
                if (this.QuestionText != null)
                {
                    hashCode = (hashCode * 59) + this.QuestionText.GetHashCode();
                }
                if (this.ResponseChoices != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseChoices.GetHashCode();
                }
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QuestionCode (string) maxLength
            if (this.QuestionCode != null && this.QuestionCode.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuestionCode, length must be less than 60.", new [] { "QuestionCode" });
            }

            // QuestionCode (string) minLength
            if (this.QuestionCode != null && this.QuestionCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuestionCode, length must be greater than 1.", new [] { "QuestionCode" });
            }

            // QuestionFormDescriptor (string) maxLength
            if (this.QuestionFormDescriptor != null && this.QuestionFormDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuestionFormDescriptor, length must be less than 306.", new [] { "QuestionFormDescriptor" });
            }

            // QuestionText (string) maxLength
            if (this.QuestionText != null && this.QuestionText.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuestionText, length must be less than 1024.", new [] { "QuestionText" });
            }

            // QuestionText (string) minLength
            if (this.QuestionText != null && this.QuestionText.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuestionText, length must be greater than 1.", new [] { "QuestionText" });
            }

            yield break;
        }
    }

}
