/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiGraduationPlanReference
    /// </summary>
    [DataContract(Name = "edFi_graduationPlanReference")]
    public partial class EdFiGraduationPlanReference : IEquatable<EdFiGraduationPlanReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlanReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGraduationPlanReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlanReference" /> class.
        /// </summary>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (required).</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (required).</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (required).</param>
        /// <param name="link">link.</param>
        public EdFiGraduationPlanReference(long educationOrganizationId = default(long), string graduationPlanTypeDescriptor = default(string), int graduationSchoolYear = default(int), Link link = default(Link))
        {
            this.EducationOrganizationId = educationOrganizationId;
            // to ensure "graduationPlanTypeDescriptor" is required (not null)
            if (graduationPlanTypeDescriptor == null)
            {
                throw new ArgumentNullException("graduationPlanTypeDescriptor is a required property for EdFiGraduationPlanReference and cannot be null");
            }
            this.GraduationPlanTypeDescriptor = graduationPlanTypeDescriptor;
            this.GraduationSchoolYear = graduationSchoolYear;
            this.Link = link;
        }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [DataMember(Name = "educationOrganizationId", IsRequired = true, EmitDefaultValue = true)]
        public long EducationOrganizationId { get; set; }

        /// <summary>
        /// The type of academic plan the student is following for graduation.
        /// </summary>
        /// <value>The type of academic plan the student is following for graduation.</value>
        [DataMember(Name = "graduationPlanTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string GraduationPlanTypeDescriptor { get; set; }

        /// <summary>
        /// The school year the student is expected to graduate.
        /// </summary>
        /// <value>The school year the student is expected to graduate.</value>
        [DataMember(Name = "graduationSchoolYear", IsRequired = true, EmitDefaultValue = true)]
        public int GraduationSchoolYear { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGraduationPlanReference {\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  GraduationPlanTypeDescriptor: ").Append(GraduationPlanTypeDescriptor).Append("\n");
            sb.Append("  GraduationSchoolYear: ").Append(GraduationSchoolYear).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiGraduationPlanReference);
        }

        /// <summary>
        /// Returns true if EdFiGraduationPlanReference instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiGraduationPlanReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiGraduationPlanReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EducationOrganizationId == input.EducationOrganizationId ||
                    this.EducationOrganizationId.Equals(input.EducationOrganizationId)
                ) && 
                (
                    this.GraduationPlanTypeDescriptor == input.GraduationPlanTypeDescriptor ||
                    (this.GraduationPlanTypeDescriptor != null &&
                    this.GraduationPlanTypeDescriptor.Equals(input.GraduationPlanTypeDescriptor))
                ) && 
                (
                    this.GraduationSchoolYear == input.GraduationSchoolYear ||
                    this.GraduationSchoolYear.Equals(input.GraduationSchoolYear)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EducationOrganizationId.GetHashCode();
                if (this.GraduationPlanTypeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.GraduationPlanTypeDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GraduationSchoolYear.GetHashCode();
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GraduationPlanTypeDescriptor (string) maxLength
            if (this.GraduationPlanTypeDescriptor != null && this.GraduationPlanTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GraduationPlanTypeDescriptor, length must be less than 306.", new [] { "GraduationPlanTypeDescriptor" });
            }

            yield break;
        }
    }

}
