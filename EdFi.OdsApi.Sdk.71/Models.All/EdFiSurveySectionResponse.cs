/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiSurveySectionResponse
    /// </summary>
    [DataContract(Name = "edFi_surveySectionResponse")]
    public partial class EdFiSurveySectionResponse : IEquatable<EdFiSurveySectionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveySectionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveySectionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveySectionResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="surveyResponseReference">surveyResponseReference (required).</param>
        /// <param name="surveySectionReference">surveySectionReference (required).</param>
        /// <param name="sectionRating">Numeric rating computed from the survey responses for the section..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        public EdFiSurveySectionResponse(string id = default(string), EdFiSurveyResponseReference surveyResponseReference = default(EdFiSurveyResponseReference), EdFiSurveySectionReference surveySectionReference = default(EdFiSurveySectionReference), double? sectionRating = default(double?), string etag = default(string), DateTime lastModifiedDate = default(DateTime))
        {
            // to ensure "surveyResponseReference" is required (not null)
            if (surveyResponseReference == null)
            {
                throw new ArgumentNullException("surveyResponseReference is a required property for EdFiSurveySectionResponse and cannot be null");
            }
            this.SurveyResponseReference = surveyResponseReference;
            // to ensure "surveySectionReference" is required (not null)
            if (surveySectionReference == null)
            {
                throw new ArgumentNullException("surveySectionReference is a required property for EdFiSurveySectionResponse and cannot be null");
            }
            this.SurveySectionReference = surveySectionReference;
            this.Id = id;
            this.SectionRating = sectionRating;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SurveyResponseReference
        /// </summary>
        [DataMember(Name = "surveyResponseReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSurveyResponseReference SurveyResponseReference { get; set; }

        /// <summary>
        /// Gets or Sets SurveySectionReference
        /// </summary>
        [DataMember(Name = "surveySectionReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSurveySectionReference SurveySectionReference { get; set; }

        /// <summary>
        /// Numeric rating computed from the survey responses for the section.
        /// </summary>
        /// <value>Numeric rating computed from the survey responses for the section.</value>
        [DataMember(Name = "sectionRating", EmitDefaultValue = true)]
        public double? SectionRating { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveySectionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SurveyResponseReference: ").Append(SurveyResponseReference).Append("\n");
            sb.Append("  SurveySectionReference: ").Append(SurveySectionReference).Append("\n");
            sb.Append("  SectionRating: ").Append(SectionRating).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiSurveySectionResponse);
        }

        /// <summary>
        /// Returns true if EdFiSurveySectionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiSurveySectionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiSurveySectionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SurveyResponseReference == input.SurveyResponseReference ||
                    (this.SurveyResponseReference != null &&
                    this.SurveyResponseReference.Equals(input.SurveyResponseReference))
                ) && 
                (
                    this.SurveySectionReference == input.SurveySectionReference ||
                    (this.SurveySectionReference != null &&
                    this.SurveySectionReference.Equals(input.SurveySectionReference))
                ) && 
                (
                    this.SectionRating == input.SectionRating ||
                    (this.SectionRating != null &&
                    this.SectionRating.Equals(input.SectionRating))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.SurveyResponseReference != null)
                {
                    hashCode = (hashCode * 59) + this.SurveyResponseReference.GetHashCode();
                }
                if (this.SurveySectionReference != null)
                {
                    hashCode = (hashCode * 59) + this.SurveySectionReference.GetHashCode();
                }
                if (this.SectionRating != null)
                {
                    hashCode = (hashCode * 59) + this.SectionRating.GetHashCode();
                }
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SectionRating (double?) minimum
            if (this.SectionRating < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SectionRating, must be a value greater than or equal to 0.", new [] { "SectionRating" });
            }

            yield break;
        }
    }

}
