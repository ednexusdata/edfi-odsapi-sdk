/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiAccountabilityRating
    /// </summary>
    [DataContract(Name = "edFi_accountabilityRating")]
    public partial class EdFiAccountabilityRating : IEquatable<EdFiAccountabilityRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAccountabilityRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiAccountabilityRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAccountabilityRating" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="ratingTitle">The title of the rating. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="rating">An accountability rating level, designation, or assessment. (required).</param>
        /// <param name="ratingDate">The date the rating was awarded..</param>
        /// <param name="ratingOrganization">The organization that assessed the rating..</param>
        /// <param name="ratingProgram">The program associated with the accountability rating (e.g., NCLB, AEIS)..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        public EdFiAccountabilityRating(string id = default(string), string ratingTitle = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), string rating = default(string), DateTime? ratingDate = default(DateTime?), string ratingOrganization = default(string), string ratingProgram = default(string), string etag = default(string), DateTime lastModifiedDate = default(DateTime))
        {
            // to ensure "ratingTitle" is required (not null)
            if (ratingTitle == null)
            {
                throw new ArgumentNullException("ratingTitle is a required property for EdFiAccountabilityRating and cannot be null");
            }
            this.RatingTitle = ratingTitle;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiAccountabilityRating and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new ArgumentNullException("schoolYearTypeReference is a required property for EdFiAccountabilityRating and cannot be null");
            }
            this.SchoolYearTypeReference = schoolYearTypeReference;
            // to ensure "rating" is required (not null)
            if (rating == null)
            {
                throw new ArgumentNullException("rating is a required property for EdFiAccountabilityRating and cannot be null");
            }
            this.Rating = rating;
            this.Id = id;
            this.RatingDate = ratingDate;
            this.RatingOrganization = ratingOrganization;
            this.RatingProgram = ratingProgram;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The title of the rating.
        /// </summary>
        /// <value>The title of the rating.</value>
        [DataMember(Name = "ratingTitle", IsRequired = true, EmitDefaultValue = true)]
        public string RatingTitle { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name = "schoolYearTypeReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// An accountability rating level, designation, or assessment.
        /// </summary>
        /// <value>An accountability rating level, designation, or assessment.</value>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public string Rating { get; set; }

        /// <summary>
        /// The date the rating was awarded.
        /// </summary>
        /// <value>The date the rating was awarded.</value>
        [DataMember(Name = "ratingDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? RatingDate { get; set; }

        /// <summary>
        /// The organization that assessed the rating.
        /// </summary>
        /// <value>The organization that assessed the rating.</value>
        [DataMember(Name = "ratingOrganization", EmitDefaultValue = true)]
        public string RatingOrganization { get; set; }

        /// <summary>
        /// The program associated with the accountability rating (e.g., NCLB, AEIS).
        /// </summary>
        /// <value>The program associated with the accountability rating (e.g., NCLB, AEIS).</value>
        [DataMember(Name = "ratingProgram", EmitDefaultValue = true)]
        public string RatingProgram { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAccountabilityRating {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RatingTitle: ").Append(RatingTitle).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RatingDate: ").Append(RatingDate).Append("\n");
            sb.Append("  RatingOrganization: ").Append(RatingOrganization).Append("\n");
            sb.Append("  RatingProgram: ").Append(RatingProgram).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiAccountabilityRating);
        }

        /// <summary>
        /// Returns true if EdFiAccountabilityRating instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiAccountabilityRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiAccountabilityRating input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RatingTitle == input.RatingTitle ||
                    (this.RatingTitle != null &&
                    this.RatingTitle.Equals(input.RatingTitle))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.RatingDate == input.RatingDate ||
                    (this.RatingDate != null &&
                    this.RatingDate.Equals(input.RatingDate))
                ) && 
                (
                    this.RatingOrganization == input.RatingOrganization ||
                    (this.RatingOrganization != null &&
                    this.RatingOrganization.Equals(input.RatingOrganization))
                ) && 
                (
                    this.RatingProgram == input.RatingProgram ||
                    (this.RatingProgram != null &&
                    this.RatingProgram.Equals(input.RatingProgram))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.RatingTitle != null)
                {
                    hashCode = (hashCode * 59) + this.RatingTitle.GetHashCode();
                }
                if (this.EducationOrganizationReference != null)
                {
                    hashCode = (hashCode * 59) + this.EducationOrganizationReference.GetHashCode();
                }
                if (this.SchoolYearTypeReference != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolYearTypeReference.GetHashCode();
                }
                if (this.Rating != null)
                {
                    hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                }
                if (this.RatingDate != null)
                {
                    hashCode = (hashCode * 59) + this.RatingDate.GetHashCode();
                }
                if (this.RatingOrganization != null)
                {
                    hashCode = (hashCode * 59) + this.RatingOrganization.GetHashCode();
                }
                if (this.RatingProgram != null)
                {
                    hashCode = (hashCode * 59) + this.RatingProgram.GetHashCode();
                }
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RatingTitle (string) maxLength
            if (this.RatingTitle != null && this.RatingTitle.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingTitle, length must be less than 60.", new [] { "RatingTitle" });
            }

            // RatingTitle (string) minLength
            if (this.RatingTitle != null && this.RatingTitle.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingTitle, length must be greater than 1.", new [] { "RatingTitle" });
            }

            // Rating (string) maxLength
            if (this.Rating != null && this.Rating.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, length must be less than 35.", new [] { "Rating" });
            }

            // Rating (string) minLength
            if (this.Rating != null && this.Rating.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, length must be greater than 1.", new [] { "Rating" });
            }

            // RatingOrganization (string) maxLength
            if (this.RatingOrganization != null && this.RatingOrganization.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingOrganization, length must be less than 35.", new [] { "RatingOrganization" });
            }

            // RatingOrganization (string) minLength
            if (this.RatingOrganization != null && this.RatingOrganization.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingOrganization, length must be greater than 1.", new [] { "RatingOrganization" });
            }

            // RatingProgram (string) maxLength
            if (this.RatingProgram != null && this.RatingProgram.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingProgram, length must be less than 30.", new [] { "RatingProgram" });
            }

            // RatingProgram (string) minLength
            if (this.RatingProgram != null && this.RatingProgram.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingProgram, length must be greater than 1.", new [] { "RatingProgram" });
            }

            yield break;
        }
    }

}
