/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// SampleStudentPet
    /// </summary>
    [DataContract(Name = "sample_studentPet")]
    public partial class SampleStudentPet : IEquatable<SampleStudentPet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleStudentPet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SampleStudentPet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleStudentPet" /> class.
        /// </summary>
        /// <param name="petName">The pet&#39;s name. (required).</param>
        /// <param name="isFixed">An indication as to whether the pet has been spayed/neutered..</param>
        public SampleStudentPet(string petName = default(string), bool? isFixed = default(bool?))
        {
            // to ensure "petName" is required (not null)
            if (petName == null)
            {
                throw new ArgumentNullException("petName is a required property for SampleStudentPet and cannot be null");
            }
            this.PetName = petName;
            this.IsFixed = isFixed;
        }

        /// <summary>
        /// The pet&#39;s name.
        /// </summary>
        /// <value>The pet&#39;s name.</value>
        [DataMember(Name = "petName", IsRequired = true, EmitDefaultValue = true)]
        public string PetName { get; set; }

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        /// <value>An indication as to whether the pet has been spayed/neutered.</value>
        [DataMember(Name = "isFixed", EmitDefaultValue = true)]
        public bool? IsFixed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SampleStudentPet {\n");
            sb.Append("  PetName: ").Append(PetName).Append("\n");
            sb.Append("  IsFixed: ").Append(IsFixed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SampleStudentPet);
        }

        /// <summary>
        /// Returns true if SampleStudentPet instances are equal
        /// </summary>
        /// <param name="input">Instance of SampleStudentPet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SampleStudentPet input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PetName == input.PetName ||
                    (this.PetName != null &&
                    this.PetName.Equals(input.PetName))
                ) && 
                (
                    this.IsFixed == input.IsFixed ||
                    (this.IsFixed != null &&
                    this.IsFixed.Equals(input.IsFixed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PetName != null)
                {
                    hashCode = (hashCode * 59) + this.PetName.GetHashCode();
                }
                if (this.IsFixed != null)
                {
                    hashCode = (hashCode * 59) + this.IsFixed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PetName (string) maxLength
            if (this.PetName != null && this.PetName.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PetName, length must be less than 20.", new [] { "PetName" });
            }

            // PetName (string) minLength
            if (this.PetName != null && this.PetName.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PetName, length must be greater than 3.", new [] { "PetName" });
            }

            yield break;
        }
    }

}
