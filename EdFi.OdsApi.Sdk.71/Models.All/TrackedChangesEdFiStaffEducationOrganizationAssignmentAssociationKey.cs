/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey
    /// </summary>
    [DataContract(Name = "trackedChanges_edFi_staffEducationOrganizationAssignmentAssociationKey")]
    public partial class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey : IEquatable<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey" /> class.
        /// </summary>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff..</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization..</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization..</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff..</param>
        public TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey(string staffClassificationDescriptor = default(string), DateTime beginDate = default(DateTime), long educationOrganizationId = default(long), string staffUniqueId = default(string))
        {
            this.StaffClassificationDescriptor = staffClassificationDescriptor;
            this.BeginDate = beginDate;
            this.EducationOrganizationId = educationOrganizationId;
            this.StaffUniqueId = staffUniqueId;
        }

        /// <summary>
        /// The titles of employment, official status, or rank of education staff.
        /// </summary>
        /// <value>The titles of employment, official status, or rank of education staff.</value>
        [DataMember(Name = "staffClassificationDescriptor", EmitDefaultValue = false)]
        public string StaffClassificationDescriptor { get; set; }

        /// <summary>
        /// Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.
        /// </summary>
        /// <value>Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.</value>
        [DataMember(Name = "beginDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [DataMember(Name = "educationOrganizationId", EmitDefaultValue = false)]
        public long EducationOrganizationId { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a staff.</value>
        [DataMember(Name = "staffUniqueId", EmitDefaultValue = false)]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey {\n");
            sb.Append("  StaffClassificationDescriptor: ").Append(StaffClassificationDescriptor).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  StaffUniqueId: ").Append(StaffUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey);
        }

        /// <summary>
        /// Returns true if TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StaffClassificationDescriptor == input.StaffClassificationDescriptor ||
                    (this.StaffClassificationDescriptor != null &&
                    this.StaffClassificationDescriptor.Equals(input.StaffClassificationDescriptor))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.EducationOrganizationId == input.EducationOrganizationId ||
                    this.EducationOrganizationId.Equals(input.EducationOrganizationId)
                ) && 
                (
                    this.StaffUniqueId == input.StaffUniqueId ||
                    (this.StaffUniqueId != null &&
                    this.StaffUniqueId.Equals(input.StaffUniqueId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StaffClassificationDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.StaffClassificationDescriptor.GetHashCode();
                }
                if (this.BeginDate != null)
                {
                    hashCode = (hashCode * 59) + this.BeginDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EducationOrganizationId.GetHashCode();
                if (this.StaffUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.StaffUniqueId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffClassificationDescriptor (string) maxLength
            if (this.StaffClassificationDescriptor != null && this.StaffClassificationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StaffClassificationDescriptor, length must be less than 306.", new [] { "StaffClassificationDescriptor" });
            }

            // StaffUniqueId (string) maxLength
            if (this.StaffUniqueId != null && this.StaffUniqueId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StaffUniqueId, length must be less than 32.", new [] { "StaffUniqueId" });
            }

            // StaffUniqueId (string) minLength
            if (this.StaffUniqueId != null && this.StaffUniqueId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StaffUniqueId, length must be greater than 1.", new [] { "StaffUniqueId" });
            }

            yield break;
        }
    }

}
