/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiOpenStaffPosition
    /// </summary>
    [DataContract(Name = "edFi_openStaffPosition")]
    public partial class EdFiOpenStaffPosition : IEquatable<EdFiOpenStaffPosition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOpenStaffPosition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiOpenStaffPosition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOpenStaffPosition" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="requisitionNumber">The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="academicSubjects">An unordered collection of openStaffPositionAcademicSubjects. The teaching field required for the open staff position..</param>
        /// <param name="datePosted">Date the open staff position was posted. (required).</param>
        /// <param name="datePostingRemoved">The date the posting was removed or filled..</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract desired for the position. (required).</param>
        /// <param name="instructionalGradeLevels">An unordered collection of openStaffPositionInstructionalGradeLevels. The set of grade levels for which the position&#39;s assignment is responsible..</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position..</param>
        /// <param name="postingResultDescriptor">Indication of whether the OpenStaffPosition was filled or retired without filling..</param>
        /// <param name="programAssignmentDescriptor">The name of the program for which the open staff position will be assigned..</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (required).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        public EdFiOpenStaffPosition(string id = default(string), string requisitionNumber = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), List<EdFiOpenStaffPositionAcademicSubject> academicSubjects = default(List<EdFiOpenStaffPositionAcademicSubject>), DateTime datePosted = default(DateTime), DateTime? datePostingRemoved = default(DateTime?), string employmentStatusDescriptor = default(string), List<EdFiOpenStaffPositionInstructionalGradeLevel> instructionalGradeLevels = default(List<EdFiOpenStaffPositionInstructionalGradeLevel>), string positionTitle = default(string), string postingResultDescriptor = default(string), string programAssignmentDescriptor = default(string), string staffClassificationDescriptor = default(string), string etag = default(string), DateTime lastModifiedDate = default(DateTime))
        {
            // to ensure "requisitionNumber" is required (not null)
            if (requisitionNumber == null)
            {
                throw new ArgumentNullException("requisitionNumber is a required property for EdFiOpenStaffPosition and cannot be null");
            }
            this.RequisitionNumber = requisitionNumber;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiOpenStaffPosition and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            this.DatePosted = datePosted;
            // to ensure "employmentStatusDescriptor" is required (not null)
            if (employmentStatusDescriptor == null)
            {
                throw new ArgumentNullException("employmentStatusDescriptor is a required property for EdFiOpenStaffPosition and cannot be null");
            }
            this.EmploymentStatusDescriptor = employmentStatusDescriptor;
            // to ensure "staffClassificationDescriptor" is required (not null)
            if (staffClassificationDescriptor == null)
            {
                throw new ArgumentNullException("staffClassificationDescriptor is a required property for EdFiOpenStaffPosition and cannot be null");
            }
            this.StaffClassificationDescriptor = staffClassificationDescriptor;
            this.Id = id;
            this.AcademicSubjects = academicSubjects;
            this.DatePostingRemoved = datePostingRemoved;
            this.InstructionalGradeLevels = instructionalGradeLevels;
            this.PositionTitle = positionTitle;
            this.PostingResultDescriptor = postingResultDescriptor;
            this.ProgramAssignmentDescriptor = programAssignmentDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        /// </summary>
        /// <value>The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.</value>
        [DataMember(Name = "requisitionNumber", IsRequired = true, EmitDefaultValue = true)]
        public string RequisitionNumber { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// An unordered collection of openStaffPositionAcademicSubjects. The teaching field required for the open staff position.
        /// </summary>
        /// <value>An unordered collection of openStaffPositionAcademicSubjects. The teaching field required for the open staff position.</value>
        [DataMember(Name = "academicSubjects", EmitDefaultValue = false)]
        public List<EdFiOpenStaffPositionAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// Date the open staff position was posted.
        /// </summary>
        /// <value>Date the open staff position was posted.</value>
        [DataMember(Name = "datePosted", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DatePosted { get; set; }

        /// <summary>
        /// The date the posting was removed or filled.
        /// </summary>
        /// <value>The date the posting was removed or filled.</value>
        [DataMember(Name = "datePostingRemoved", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DatePostingRemoved { get; set; }

        /// <summary>
        /// Reflects the type of employment or contract desired for the position.
        /// </summary>
        /// <value>Reflects the type of employment or contract desired for the position.</value>
        [DataMember(Name = "employmentStatusDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string EmploymentStatusDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of openStaffPositionInstructionalGradeLevels. The set of grade levels for which the position&#39;s assignment is responsible.
        /// </summary>
        /// <value>An unordered collection of openStaffPositionInstructionalGradeLevels. The set of grade levels for which the position&#39;s assignment is responsible.</value>
        [DataMember(Name = "instructionalGradeLevels", EmitDefaultValue = false)]
        public List<EdFiOpenStaffPositionInstructionalGradeLevel> InstructionalGradeLevels { get; set; }

        /// <summary>
        /// The descriptive name of an individual&#39;s position.
        /// </summary>
        /// <value>The descriptive name of an individual&#39;s position.</value>
        [DataMember(Name = "positionTitle", EmitDefaultValue = true)]
        public string PositionTitle { get; set; }

        /// <summary>
        /// Indication of whether the OpenStaffPosition was filled or retired without filling.
        /// </summary>
        /// <value>Indication of whether the OpenStaffPosition was filled or retired without filling.</value>
        [DataMember(Name = "postingResultDescriptor", EmitDefaultValue = true)]
        public string PostingResultDescriptor { get; set; }

        /// <summary>
        /// The name of the program for which the open staff position will be assigned.
        /// </summary>
        /// <value>The name of the program for which the open staff position will be assigned.</value>
        [DataMember(Name = "programAssignmentDescriptor", EmitDefaultValue = true)]
        public string ProgramAssignmentDescriptor { get; set; }

        /// <summary>
        /// The titles of employment, official status, or rank of education staff.
        /// </summary>
        /// <value>The titles of employment, official status, or rank of education staff.</value>
        [DataMember(Name = "staffClassificationDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string StaffClassificationDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiOpenStaffPosition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RequisitionNumber: ").Append(RequisitionNumber).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  DatePosted: ").Append(DatePosted).Append("\n");
            sb.Append("  DatePostingRemoved: ").Append(DatePostingRemoved).Append("\n");
            sb.Append("  EmploymentStatusDescriptor: ").Append(EmploymentStatusDescriptor).Append("\n");
            sb.Append("  InstructionalGradeLevels: ").Append(InstructionalGradeLevels).Append("\n");
            sb.Append("  PositionTitle: ").Append(PositionTitle).Append("\n");
            sb.Append("  PostingResultDescriptor: ").Append(PostingResultDescriptor).Append("\n");
            sb.Append("  ProgramAssignmentDescriptor: ").Append(ProgramAssignmentDescriptor).Append("\n");
            sb.Append("  StaffClassificationDescriptor: ").Append(StaffClassificationDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiOpenStaffPosition);
        }

        /// <summary>
        /// Returns true if EdFiOpenStaffPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiOpenStaffPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiOpenStaffPosition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RequisitionNumber == input.RequisitionNumber ||
                    (this.RequisitionNumber != null &&
                    this.RequisitionNumber.Equals(input.RequisitionNumber))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.AcademicSubjects == input.AcademicSubjects ||
                    this.AcademicSubjects != null &&
                    input.AcademicSubjects != null &&
                    this.AcademicSubjects.SequenceEqual(input.AcademicSubjects)
                ) && 
                (
                    this.DatePosted == input.DatePosted ||
                    (this.DatePosted != null &&
                    this.DatePosted.Equals(input.DatePosted))
                ) && 
                (
                    this.DatePostingRemoved == input.DatePostingRemoved ||
                    (this.DatePostingRemoved != null &&
                    this.DatePostingRemoved.Equals(input.DatePostingRemoved))
                ) && 
                (
                    this.EmploymentStatusDescriptor == input.EmploymentStatusDescriptor ||
                    (this.EmploymentStatusDescriptor != null &&
                    this.EmploymentStatusDescriptor.Equals(input.EmploymentStatusDescriptor))
                ) && 
                (
                    this.InstructionalGradeLevels == input.InstructionalGradeLevels ||
                    this.InstructionalGradeLevels != null &&
                    input.InstructionalGradeLevels != null &&
                    this.InstructionalGradeLevels.SequenceEqual(input.InstructionalGradeLevels)
                ) && 
                (
                    this.PositionTitle == input.PositionTitle ||
                    (this.PositionTitle != null &&
                    this.PositionTitle.Equals(input.PositionTitle))
                ) && 
                (
                    this.PostingResultDescriptor == input.PostingResultDescriptor ||
                    (this.PostingResultDescriptor != null &&
                    this.PostingResultDescriptor.Equals(input.PostingResultDescriptor))
                ) && 
                (
                    this.ProgramAssignmentDescriptor == input.ProgramAssignmentDescriptor ||
                    (this.ProgramAssignmentDescriptor != null &&
                    this.ProgramAssignmentDescriptor.Equals(input.ProgramAssignmentDescriptor))
                ) && 
                (
                    this.StaffClassificationDescriptor == input.StaffClassificationDescriptor ||
                    (this.StaffClassificationDescriptor != null &&
                    this.StaffClassificationDescriptor.Equals(input.StaffClassificationDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.RequisitionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RequisitionNumber.GetHashCode();
                }
                if (this.EducationOrganizationReference != null)
                {
                    hashCode = (hashCode * 59) + this.EducationOrganizationReference.GetHashCode();
                }
                if (this.AcademicSubjects != null)
                {
                    hashCode = (hashCode * 59) + this.AcademicSubjects.GetHashCode();
                }
                if (this.DatePosted != null)
                {
                    hashCode = (hashCode * 59) + this.DatePosted.GetHashCode();
                }
                if (this.DatePostingRemoved != null)
                {
                    hashCode = (hashCode * 59) + this.DatePostingRemoved.GetHashCode();
                }
                if (this.EmploymentStatusDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.EmploymentStatusDescriptor.GetHashCode();
                }
                if (this.InstructionalGradeLevels != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionalGradeLevels.GetHashCode();
                }
                if (this.PositionTitle != null)
                {
                    hashCode = (hashCode * 59) + this.PositionTitle.GetHashCode();
                }
                if (this.PostingResultDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.PostingResultDescriptor.GetHashCode();
                }
                if (this.ProgramAssignmentDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.ProgramAssignmentDescriptor.GetHashCode();
                }
                if (this.StaffClassificationDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.StaffClassificationDescriptor.GetHashCode();
                }
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RequisitionNumber (string) maxLength
            if (this.RequisitionNumber != null && this.RequisitionNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequisitionNumber, length must be less than 20.", new [] { "RequisitionNumber" });
            }

            // RequisitionNumber (string) minLength
            if (this.RequisitionNumber != null && this.RequisitionNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequisitionNumber, length must be greater than 1.", new [] { "RequisitionNumber" });
            }

            // EmploymentStatusDescriptor (string) maxLength
            if (this.EmploymentStatusDescriptor != null && this.EmploymentStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmploymentStatusDescriptor, length must be less than 306.", new [] { "EmploymentStatusDescriptor" });
            }

            // PositionTitle (string) maxLength
            if (this.PositionTitle != null && this.PositionTitle.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PositionTitle, length must be less than 100.", new [] { "PositionTitle" });
            }

            // PositionTitle (string) minLength
            if (this.PositionTitle != null && this.PositionTitle.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PositionTitle, length must be greater than 1.", new [] { "PositionTitle" });
            }

            // PostingResultDescriptor (string) maxLength
            if (this.PostingResultDescriptor != null && this.PostingResultDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostingResultDescriptor, length must be less than 306.", new [] { "PostingResultDescriptor" });
            }

            // ProgramAssignmentDescriptor (string) maxLength
            if (this.ProgramAssignmentDescriptor != null && this.ProgramAssignmentDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramAssignmentDescriptor, length must be less than 306.", new [] { "ProgramAssignmentDescriptor" });
            }

            // StaffClassificationDescriptor (string) maxLength
            if (this.StaffClassificationDescriptor != null && this.StaffClassificationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StaffClassificationDescriptor, length must be less than 306.", new [] { "StaffClassificationDescriptor" });
            }

            yield break;
        }
    }

}
