/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// SampleBusRoute
    /// </summary>
    [DataContract(Name = "sample_busRoute")]
    public partial class SampleBusRoute : IEquatable<SampleBusRoute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleBusRoute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SampleBusRoute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleBusRoute" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="busId">The unique identifier for the bus assigned to the bus route. (required).</param>
        /// <param name="busRouteNumber">A unique identifier for the bus route. (required).</param>
        /// <param name="serviceAreaPostalCodes">An unordered collection of busRouteServiceAreaPostalCodes. The postal codes served by the bus route. (required).</param>
        /// <param name="startTimes">An unordered collection of busRouteStartTimes. The time the bus route begins. (required).</param>
        /// <param name="telephones">An unordered collection of busRouteTelephones. Telephone numbers at which dispatchers may be reached for this bus route. (required).</param>
        /// <param name="staffEducationOrganizationAssignmentAssociationReference">staffEducationOrganizationAssignmentAssociationReference.</param>
        /// <param name="busRouteDirection">The direction of the bus route. (required).</param>
        /// <param name="busRouteDuration">The number of minutes per week in which the bus route is operational..</param>
        /// <param name="busYears">An unordered collection of busRouteBusYears. The years in which the bus route has been in active..</param>
        /// <param name="daily">An indication as to whether the bus route operates every weekday..</param>
        /// <param name="disabilityDescriptor">The disability served by the bus route, if applicable..</param>
        /// <param name="expectedTransitTime">The approximate amount of time, in minutes, for the bus route operation each day. (required).</param>
        /// <param name="hoursPerWeek">The number of hours per week in which the bus route is operational. (required).</param>
        /// <param name="operatingCost">The approximate annual cost for the bus route. (required).</param>
        /// <param name="optimalCapacity">The percentage of seats filled under optimal conditions..</param>
        /// <param name="programs">An unordered collection of busRoutePrograms. Programs served by the bus route..</param>
        /// <param name="startDate">The date the bus route became operational..</param>
        /// <param name="weeklyMileage">The approximate weekly mileage for the bus route..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        public SampleBusRoute(string id = default(string), string busId = default(string), int busRouteNumber = default(int), List<SampleBusRouteServiceAreaPostalCode> serviceAreaPostalCodes = default(List<SampleBusRouteServiceAreaPostalCode>), List<SampleBusRouteStartTime> startTimes = default(List<SampleBusRouteStartTime>), List<SampleBusRouteTelephone> telephones = default(List<SampleBusRouteTelephone>), EdFiStaffEducationOrganizationAssignmentAssociationReference staffEducationOrganizationAssignmentAssociationReference = default(EdFiStaffEducationOrganizationAssignmentAssociationReference), string busRouteDirection = default(string), int? busRouteDuration = default(int?), List<SampleBusRouteBusYear> busYears = default(List<SampleBusRouteBusYear>), bool? daily = default(bool?), string disabilityDescriptor = default(string), string expectedTransitTime = default(string), double hoursPerWeek = default(double), double operatingCost = default(double), double? optimalCapacity = default(double?), List<SampleBusRouteProgram> programs = default(List<SampleBusRouteProgram>), DateTime? startDate = default(DateTime?), double? weeklyMileage = default(double?), string etag = default(string), DateTime lastModifiedDate = default(DateTime))
        {
            // to ensure "busId" is required (not null)
            if (busId == null)
            {
                throw new ArgumentNullException("busId is a required property for SampleBusRoute and cannot be null");
            }
            this.BusId = busId;
            this.BusRouteNumber = busRouteNumber;
            // to ensure "serviceAreaPostalCodes" is required (not null)
            if (serviceAreaPostalCodes == null)
            {
                throw new ArgumentNullException("serviceAreaPostalCodes is a required property for SampleBusRoute and cannot be null");
            }
            this.ServiceAreaPostalCodes = serviceAreaPostalCodes;
            // to ensure "startTimes" is required (not null)
            if (startTimes == null)
            {
                throw new ArgumentNullException("startTimes is a required property for SampleBusRoute and cannot be null");
            }
            this.StartTimes = startTimes;
            // to ensure "telephones" is required (not null)
            if (telephones == null)
            {
                throw new ArgumentNullException("telephones is a required property for SampleBusRoute and cannot be null");
            }
            this.Telephones = telephones;
            // to ensure "busRouteDirection" is required (not null)
            if (busRouteDirection == null)
            {
                throw new ArgumentNullException("busRouteDirection is a required property for SampleBusRoute and cannot be null");
            }
            this.BusRouteDirection = busRouteDirection;
            // to ensure "expectedTransitTime" is required (not null)
            if (expectedTransitTime == null)
            {
                throw new ArgumentNullException("expectedTransitTime is a required property for SampleBusRoute and cannot be null");
            }
            this.ExpectedTransitTime = expectedTransitTime;
            this.HoursPerWeek = hoursPerWeek;
            this.OperatingCost = operatingCost;
            this.Id = id;
            this.StaffEducationOrganizationAssignmentAssociationReference = staffEducationOrganizationAssignmentAssociationReference;
            this.BusRouteDuration = busRouteDuration;
            this.BusYears = busYears;
            this.Daily = daily;
            this.DisabilityDescriptor = disabilityDescriptor;
            this.OptimalCapacity = optimalCapacity;
            this.Programs = programs;
            this.StartDate = startDate;
            this.WeeklyMileage = weeklyMileage;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier for the bus assigned to the bus route.
        /// </summary>
        /// <value>The unique identifier for the bus assigned to the bus route.</value>
        [DataMember(Name = "busId", IsRequired = true, EmitDefaultValue = true)]
        public string BusId { get; set; }

        /// <summary>
        /// A unique identifier for the bus route.
        /// </summary>
        /// <value>A unique identifier for the bus route.</value>
        [DataMember(Name = "busRouteNumber", IsRequired = true, EmitDefaultValue = true)]
        public int BusRouteNumber { get; set; }

        /// <summary>
        /// An unordered collection of busRouteServiceAreaPostalCodes. The postal codes served by the bus route.
        /// </summary>
        /// <value>An unordered collection of busRouteServiceAreaPostalCodes. The postal codes served by the bus route.</value>
        [DataMember(Name = "serviceAreaPostalCodes", IsRequired = true, EmitDefaultValue = true)]
        public List<SampleBusRouteServiceAreaPostalCode> ServiceAreaPostalCodes { get; set; }

        /// <summary>
        /// An unordered collection of busRouteStartTimes. The time the bus route begins.
        /// </summary>
        /// <value>An unordered collection of busRouteStartTimes. The time the bus route begins.</value>
        [DataMember(Name = "startTimes", IsRequired = true, EmitDefaultValue = true)]
        public List<SampleBusRouteStartTime> StartTimes { get; set; }

        /// <summary>
        /// An unordered collection of busRouteTelephones. Telephone numbers at which dispatchers may be reached for this bus route.
        /// </summary>
        /// <value>An unordered collection of busRouteTelephones. Telephone numbers at which dispatchers may be reached for this bus route.</value>
        [DataMember(Name = "telephones", IsRequired = true, EmitDefaultValue = true)]
        public List<SampleBusRouteTelephone> Telephones { get; set; }

        /// <summary>
        /// Gets or Sets StaffEducationOrganizationAssignmentAssociationReference
        /// </summary>
        [DataMember(Name = "staffEducationOrganizationAssignmentAssociationReference", EmitDefaultValue = false)]
        public EdFiStaffEducationOrganizationAssignmentAssociationReference StaffEducationOrganizationAssignmentAssociationReference { get; set; }

        /// <summary>
        /// The direction of the bus route.
        /// </summary>
        /// <value>The direction of the bus route.</value>
        [DataMember(Name = "busRouteDirection", IsRequired = true, EmitDefaultValue = true)]
        public string BusRouteDirection { get; set; }

        /// <summary>
        /// The number of minutes per week in which the bus route is operational.
        /// </summary>
        /// <value>The number of minutes per week in which the bus route is operational.</value>
        [DataMember(Name = "busRouteDuration", EmitDefaultValue = true)]
        public int? BusRouteDuration { get; set; }

        /// <summary>
        /// An unordered collection of busRouteBusYears. The years in which the bus route has been in active.
        /// </summary>
        /// <value>An unordered collection of busRouteBusYears. The years in which the bus route has been in active.</value>
        [DataMember(Name = "busYears", EmitDefaultValue = false)]
        public List<SampleBusRouteBusYear> BusYears { get; set; }

        /// <summary>
        /// An indication as to whether the bus route operates every weekday.
        /// </summary>
        /// <value>An indication as to whether the bus route operates every weekday.</value>
        [DataMember(Name = "daily", EmitDefaultValue = true)]
        public bool? Daily { get; set; }

        /// <summary>
        /// The disability served by the bus route, if applicable.
        /// </summary>
        /// <value>The disability served by the bus route, if applicable.</value>
        [DataMember(Name = "disabilityDescriptor", EmitDefaultValue = true)]
        public string DisabilityDescriptor { get; set; }

        /// <summary>
        /// The approximate amount of time, in minutes, for the bus route operation each day.
        /// </summary>
        /// <value>The approximate amount of time, in minutes, for the bus route operation each day.</value>
        [DataMember(Name = "expectedTransitTime", IsRequired = true, EmitDefaultValue = true)]
        public string ExpectedTransitTime { get; set; }

        /// <summary>
        /// The number of hours per week in which the bus route is operational.
        /// </summary>
        /// <value>The number of hours per week in which the bus route is operational.</value>
        [DataMember(Name = "hoursPerWeek", IsRequired = true, EmitDefaultValue = true)]
        public double HoursPerWeek { get; set; }

        /// <summary>
        /// The approximate annual cost for the bus route.
        /// </summary>
        /// <value>The approximate annual cost for the bus route.</value>
        [DataMember(Name = "operatingCost", IsRequired = true, EmitDefaultValue = true)]
        public double OperatingCost { get; set; }

        /// <summary>
        /// The percentage of seats filled under optimal conditions.
        /// </summary>
        /// <value>The percentage of seats filled under optimal conditions.</value>
        [DataMember(Name = "optimalCapacity", EmitDefaultValue = true)]
        public double? OptimalCapacity { get; set; }

        /// <summary>
        /// An unordered collection of busRoutePrograms. Programs served by the bus route.
        /// </summary>
        /// <value>An unordered collection of busRoutePrograms. Programs served by the bus route.</value>
        [DataMember(Name = "programs", EmitDefaultValue = false)]
        public List<SampleBusRouteProgram> Programs { get; set; }

        /// <summary>
        /// The date the bus route became operational.
        /// </summary>
        /// <value>The date the bus route became operational.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The approximate weekly mileage for the bus route.
        /// </summary>
        /// <value>The approximate weekly mileage for the bus route.</value>
        [DataMember(Name = "weeklyMileage", EmitDefaultValue = true)]
        public double? WeeklyMileage { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SampleBusRoute {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BusId: ").Append(BusId).Append("\n");
            sb.Append("  BusRouteNumber: ").Append(BusRouteNumber).Append("\n");
            sb.Append("  ServiceAreaPostalCodes: ").Append(ServiceAreaPostalCodes).Append("\n");
            sb.Append("  StartTimes: ").Append(StartTimes).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  StaffEducationOrganizationAssignmentAssociationReference: ").Append(StaffEducationOrganizationAssignmentAssociationReference).Append("\n");
            sb.Append("  BusRouteDirection: ").Append(BusRouteDirection).Append("\n");
            sb.Append("  BusRouteDuration: ").Append(BusRouteDuration).Append("\n");
            sb.Append("  BusYears: ").Append(BusYears).Append("\n");
            sb.Append("  Daily: ").Append(Daily).Append("\n");
            sb.Append("  DisabilityDescriptor: ").Append(DisabilityDescriptor).Append("\n");
            sb.Append("  ExpectedTransitTime: ").Append(ExpectedTransitTime).Append("\n");
            sb.Append("  HoursPerWeek: ").Append(HoursPerWeek).Append("\n");
            sb.Append("  OperatingCost: ").Append(OperatingCost).Append("\n");
            sb.Append("  OptimalCapacity: ").Append(OptimalCapacity).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  WeeklyMileage: ").Append(WeeklyMileage).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SampleBusRoute);
        }

        /// <summary>
        /// Returns true if SampleBusRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of SampleBusRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SampleBusRoute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BusId == input.BusId ||
                    (this.BusId != null &&
                    this.BusId.Equals(input.BusId))
                ) && 
                (
                    this.BusRouteNumber == input.BusRouteNumber ||
                    this.BusRouteNumber.Equals(input.BusRouteNumber)
                ) && 
                (
                    this.ServiceAreaPostalCodes == input.ServiceAreaPostalCodes ||
                    this.ServiceAreaPostalCodes != null &&
                    input.ServiceAreaPostalCodes != null &&
                    this.ServiceAreaPostalCodes.SequenceEqual(input.ServiceAreaPostalCodes)
                ) && 
                (
                    this.StartTimes == input.StartTimes ||
                    this.StartTimes != null &&
                    input.StartTimes != null &&
                    this.StartTimes.SequenceEqual(input.StartTimes)
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    input.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.StaffEducationOrganizationAssignmentAssociationReference == input.StaffEducationOrganizationAssignmentAssociationReference ||
                    (this.StaffEducationOrganizationAssignmentAssociationReference != null &&
                    this.StaffEducationOrganizationAssignmentAssociationReference.Equals(input.StaffEducationOrganizationAssignmentAssociationReference))
                ) && 
                (
                    this.BusRouteDirection == input.BusRouteDirection ||
                    (this.BusRouteDirection != null &&
                    this.BusRouteDirection.Equals(input.BusRouteDirection))
                ) && 
                (
                    this.BusRouteDuration == input.BusRouteDuration ||
                    (this.BusRouteDuration != null &&
                    this.BusRouteDuration.Equals(input.BusRouteDuration))
                ) && 
                (
                    this.BusYears == input.BusYears ||
                    this.BusYears != null &&
                    input.BusYears != null &&
                    this.BusYears.SequenceEqual(input.BusYears)
                ) && 
                (
                    this.Daily == input.Daily ||
                    (this.Daily != null &&
                    this.Daily.Equals(input.Daily))
                ) && 
                (
                    this.DisabilityDescriptor == input.DisabilityDescriptor ||
                    (this.DisabilityDescriptor != null &&
                    this.DisabilityDescriptor.Equals(input.DisabilityDescriptor))
                ) && 
                (
                    this.ExpectedTransitTime == input.ExpectedTransitTime ||
                    (this.ExpectedTransitTime != null &&
                    this.ExpectedTransitTime.Equals(input.ExpectedTransitTime))
                ) && 
                (
                    this.HoursPerWeek == input.HoursPerWeek ||
                    this.HoursPerWeek.Equals(input.HoursPerWeek)
                ) && 
                (
                    this.OperatingCost == input.OperatingCost ||
                    this.OperatingCost.Equals(input.OperatingCost)
                ) && 
                (
                    this.OptimalCapacity == input.OptimalCapacity ||
                    (this.OptimalCapacity != null &&
                    this.OptimalCapacity.Equals(input.OptimalCapacity))
                ) && 
                (
                    this.Programs == input.Programs ||
                    this.Programs != null &&
                    input.Programs != null &&
                    this.Programs.SequenceEqual(input.Programs)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.WeeklyMileage == input.WeeklyMileage ||
                    (this.WeeklyMileage != null &&
                    this.WeeklyMileage.Equals(input.WeeklyMileage))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.BusId != null)
                {
                    hashCode = (hashCode * 59) + this.BusId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BusRouteNumber.GetHashCode();
                if (this.ServiceAreaPostalCodes != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceAreaPostalCodes.GetHashCode();
                }
                if (this.StartTimes != null)
                {
                    hashCode = (hashCode * 59) + this.StartTimes.GetHashCode();
                }
                if (this.Telephones != null)
                {
                    hashCode = (hashCode * 59) + this.Telephones.GetHashCode();
                }
                if (this.StaffEducationOrganizationAssignmentAssociationReference != null)
                {
                    hashCode = (hashCode * 59) + this.StaffEducationOrganizationAssignmentAssociationReference.GetHashCode();
                }
                if (this.BusRouteDirection != null)
                {
                    hashCode = (hashCode * 59) + this.BusRouteDirection.GetHashCode();
                }
                if (this.BusRouteDuration != null)
                {
                    hashCode = (hashCode * 59) + this.BusRouteDuration.GetHashCode();
                }
                if (this.BusYears != null)
                {
                    hashCode = (hashCode * 59) + this.BusYears.GetHashCode();
                }
                if (this.Daily != null)
                {
                    hashCode = (hashCode * 59) + this.Daily.GetHashCode();
                }
                if (this.DisabilityDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.DisabilityDescriptor.GetHashCode();
                }
                if (this.ExpectedTransitTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedTransitTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HoursPerWeek.GetHashCode();
                hashCode = (hashCode * 59) + this.OperatingCost.GetHashCode();
                if (this.OptimalCapacity != null)
                {
                    hashCode = (hashCode * 59) + this.OptimalCapacity.GetHashCode();
                }
                if (this.Programs != null)
                {
                    hashCode = (hashCode * 59) + this.Programs.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.WeeklyMileage != null)
                {
                    hashCode = (hashCode * 59) + this.WeeklyMileage.GetHashCode();
                }
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusId (string) maxLength
            if (this.BusId != null && this.BusId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusId, length must be less than 60.", new [] { "BusId" });
            }

            // BusId (string) minLength
            if (this.BusId != null && this.BusId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusId, length must be greater than 1.", new [] { "BusId" });
            }

            // BusRouteDirection (string) maxLength
            if (this.BusRouteDirection != null && this.BusRouteDirection.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusRouteDirection, length must be less than 15.", new [] { "BusRouteDirection" });
            }

            // BusRouteDuration (int?) minimum
            if (this.BusRouteDuration < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusRouteDuration, must be a value greater than or equal to 1.", new [] { "BusRouteDuration" });
            }

            // DisabilityDescriptor (string) maxLength
            if (this.DisabilityDescriptor != null && this.DisabilityDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisabilityDescriptor, length must be less than 306.", new [] { "DisabilityDescriptor" });
            }

            // ExpectedTransitTime (string) maxLength
            if (this.ExpectedTransitTime != null && this.ExpectedTransitTime.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpectedTransitTime, length must be less than 30.", new [] { "ExpectedTransitTime" });
            }

            yield break;
        }
    }

}
