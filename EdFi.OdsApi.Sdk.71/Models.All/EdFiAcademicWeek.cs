/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiAcademicWeek
    /// </summary>
    [DataContract(Name = "edFi_academicWeek")]
    public partial class EdFiAcademicWeek : IEquatable<EdFiAcademicWeek>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAcademicWeek" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiAcademicWeek() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAcademicWeek" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="weekIdentifier">The school label for the week. (required).</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="beginDate">The start date for the academic week. (required).</param>
        /// <param name="endDate">The end date for the academic week. (required).</param>
        /// <param name="totalInstructionalDays">The total instructional days during the academic week. (required).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        public EdFiAcademicWeek(string id = default(string), string weekIdentifier = default(string), EdFiSchoolReference schoolReference = default(EdFiSchoolReference), DateTime beginDate = default(DateTime), DateTime endDate = default(DateTime), int totalInstructionalDays = default(int), string etag = default(string), DateTime lastModifiedDate = default(DateTime))
        {
            // to ensure "weekIdentifier" is required (not null)
            if (weekIdentifier == null)
            {
                throw new ArgumentNullException("weekIdentifier is a required property for EdFiAcademicWeek and cannot be null");
            }
            this.WeekIdentifier = weekIdentifier;
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new ArgumentNullException("schoolReference is a required property for EdFiAcademicWeek and cannot be null");
            }
            this.SchoolReference = schoolReference;
            this.BeginDate = beginDate;
            this.EndDate = endDate;
            this.TotalInstructionalDays = totalInstructionalDays;
            this.Id = id;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The school label for the week.
        /// </summary>
        /// <value>The school label for the week.</value>
        [DataMember(Name = "weekIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string WeekIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name = "schoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// The start date for the academic week.
        /// </summary>
        /// <value>The start date for the academic week.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The end date for the academic week.
        /// </summary>
        /// <value>The end date for the academic week.</value>
        [DataMember(Name = "endDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The total instructional days during the academic week.
        /// </summary>
        /// <value>The total instructional days during the academic week.</value>
        [DataMember(Name = "totalInstructionalDays", IsRequired = true, EmitDefaultValue = true)]
        public int TotalInstructionalDays { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAcademicWeek {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  WeekIdentifier: ").Append(WeekIdentifier).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TotalInstructionalDays: ").Append(TotalInstructionalDays).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiAcademicWeek);
        }

        /// <summary>
        /// Returns true if EdFiAcademicWeek instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiAcademicWeek to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiAcademicWeek input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.WeekIdentifier == input.WeekIdentifier ||
                    (this.WeekIdentifier != null &&
                    this.WeekIdentifier.Equals(input.WeekIdentifier))
                ) && 
                (
                    this.SchoolReference == input.SchoolReference ||
                    (this.SchoolReference != null &&
                    this.SchoolReference.Equals(input.SchoolReference))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.TotalInstructionalDays == input.TotalInstructionalDays ||
                    this.TotalInstructionalDays.Equals(input.TotalInstructionalDays)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.WeekIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.WeekIdentifier.GetHashCode();
                }
                if (this.SchoolReference != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolReference.GetHashCode();
                }
                if (this.BeginDate != null)
                {
                    hashCode = (hashCode * 59) + this.BeginDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalInstructionalDays.GetHashCode();
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WeekIdentifier (string) maxLength
            if (this.WeekIdentifier != null && this.WeekIdentifier.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WeekIdentifier, length must be less than 80.", new [] { "WeekIdentifier" });
            }

            // WeekIdentifier (string) minLength
            if (this.WeekIdentifier != null && this.WeekIdentifier.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WeekIdentifier, length must be greater than 5.", new [] { "WeekIdentifier" });
            }

            // TotalInstructionalDays (int) minimum
            if (this.TotalInstructionalDays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalInstructionalDays, must be a value greater than or equal to 0.", new [] { "TotalInstructionalDays" });
            }

            yield break;
        }
    }

}
