/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiSurveyQuestionResponseValue
    /// </summary>
    [DataContract(Name = "edFi_surveyQuestionResponseValue")]
    public partial class EdFiSurveyQuestionResponseValue : IEquatable<EdFiSurveyQuestionResponseValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponseValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyQuestionResponseValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponseValue" /> class.
        /// </summary>
        /// <param name="surveyQuestionResponseValueIdentifier">Primary key for the response value; a unique, usually sequential numeric value for a collection of responses, or potentially the value of NumericResponse for a single response. (required).</param>
        /// <param name="numericResponse">A numeric response to the question..</param>
        /// <param name="textResponse">A text response to the question..</param>
        public EdFiSurveyQuestionResponseValue(int surveyQuestionResponseValueIdentifier = default(int), int? numericResponse = default(int?), string textResponse = default(string))
        {
            this.SurveyQuestionResponseValueIdentifier = surveyQuestionResponseValueIdentifier;
            this.NumericResponse = numericResponse;
            this.TextResponse = textResponse;
        }

        /// <summary>
        /// Primary key for the response value; a unique, usually sequential numeric value for a collection of responses, or potentially the value of NumericResponse for a single response.
        /// </summary>
        /// <value>Primary key for the response value; a unique, usually sequential numeric value for a collection of responses, or potentially the value of NumericResponse for a single response.</value>
        [DataMember(Name = "surveyQuestionResponseValueIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public int SurveyQuestionResponseValueIdentifier { get; set; }

        /// <summary>
        /// A numeric response to the question.
        /// </summary>
        /// <value>A numeric response to the question.</value>
        [DataMember(Name = "numericResponse", EmitDefaultValue = true)]
        public int? NumericResponse { get; set; }

        /// <summary>
        /// A text response to the question.
        /// </summary>
        /// <value>A text response to the question.</value>
        [DataMember(Name = "textResponse", EmitDefaultValue = true)]
        public string TextResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyQuestionResponseValue {\n");
            sb.Append("  SurveyQuestionResponseValueIdentifier: ").Append(SurveyQuestionResponseValueIdentifier).Append("\n");
            sb.Append("  NumericResponse: ").Append(NumericResponse).Append("\n");
            sb.Append("  TextResponse: ").Append(TextResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiSurveyQuestionResponseValue);
        }

        /// <summary>
        /// Returns true if EdFiSurveyQuestionResponseValue instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiSurveyQuestionResponseValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiSurveyQuestionResponseValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SurveyQuestionResponseValueIdentifier == input.SurveyQuestionResponseValueIdentifier ||
                    this.SurveyQuestionResponseValueIdentifier.Equals(input.SurveyQuestionResponseValueIdentifier)
                ) && 
                (
                    this.NumericResponse == input.NumericResponse ||
                    (this.NumericResponse != null &&
                    this.NumericResponse.Equals(input.NumericResponse))
                ) && 
                (
                    this.TextResponse == input.TextResponse ||
                    (this.TextResponse != null &&
                    this.TextResponse.Equals(input.TextResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SurveyQuestionResponseValueIdentifier.GetHashCode();
                if (this.NumericResponse != null)
                {
                    hashCode = (hashCode * 59) + this.NumericResponse.GetHashCode();
                }
                if (this.TextResponse != null)
                {
                    hashCode = (hashCode * 59) + this.TextResponse.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumericResponse (int?) maximum
            if (this.NumericResponse > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumericResponse, must be a value less than or equal to 100.", new [] { "NumericResponse" });
            }

            // NumericResponse (int?) minimum
            if (this.NumericResponse < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumericResponse, must be a value greater than or equal to 0.", new [] { "NumericResponse" });
            }

            // TextResponse (string) maxLength
            if (this.TextResponse != null && this.TextResponse.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TextResponse, length must be less than 2048.", new [] { "TextResponse" });
            }

            // TextResponse (string) minLength
            if (this.TextResponse != null && this.TextResponse.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TextResponse, length must be greater than 1.", new [] { "TextResponse" });
            }

            yield break;
        }
    }

}
