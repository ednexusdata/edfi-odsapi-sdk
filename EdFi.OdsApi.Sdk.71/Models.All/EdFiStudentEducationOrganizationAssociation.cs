/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssociation
    /// </summary>
    [DataContract(Name = "edFi_studentEducationOrganizationAssociation")]
    public partial class EdFiStudentEducationOrganizationAssociation : IEquatable<EdFiStudentEducationOrganizationAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentEducationOrganizationAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="addresses">An unordered collection of studentEducationOrganizationAssociationAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code..</param>
        /// <param name="ancestryEthnicOrigins">An unordered collection of studentEducationOrganizationAssociationAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies..</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence..</param>
        /// <param name="cohortYears">An unordered collection of studentEducationOrganizationAssociationCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade..</param>
        /// <param name="disabilities">An unordered collection of studentEducationOrganizationAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as determined by evaluation(s) conducted by the education organization..</param>
        /// <param name="electronicMails">An unordered collection of studentEducationOrganizationAssociationElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;.</param>
        /// <param name="internationalAddresses">An unordered collection of studentEducationOrganizationAssociationInternationalAddresses. The set of elements that describes an international address..</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence..</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence..</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence..</param>
        /// <param name="languages">An unordered collection of studentEducationOrganizationAssociationLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-3 language codes..</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient..</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface..</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual..</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school..</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device..</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition..</param>
        /// <param name="races">An unordered collection of studentEducationOrganizationAssociationRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies as last reported to the education organization. The data model allows for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="sexDescriptor">The student&#39;s gender as last reported to the education organization. (required).</param>
        /// <param name="studentCharacteristics">An unordered collection of studentEducationOrganizationAssociationStudentCharacteristics. Reflects important characteristics of a student. If a student has a characteristic present, that characteristic is considered true or active for that student. If a characteristic is not present, no assumption is made as to the applicability of the characteristic, but local policy may dictate otherwise..</param>
        /// <param name="studentIdentificationCodes">An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student..</param>
        /// <param name="studentIndicators">An unordered collection of studentEducationOrganizationAssociationStudentIndicators. An indicator or metric computed for the student (e.g., at risk)..</param>
        /// <param name="telephones">An unordered collection of studentEducationOrganizationAssociationTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="tribalAffiliations">An unordered collection of studentEducationOrganizationAssociationTribalAffiliations. An American Indian tribe with which the student is affiliated as last reported to the education organization..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        public EdFiStudentEducationOrganizationAssociation(string id = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiStudentReference studentReference = default(EdFiStudentReference), List<EdFiStudentEducationOrganizationAssociationAddress> addresses = default(List<EdFiStudentEducationOrganizationAssociationAddress>), List<EdFiStudentEducationOrganizationAssociationAncestryEthnicOrigin> ancestryEthnicOrigins = default(List<EdFiStudentEducationOrganizationAssociationAncestryEthnicOrigin>), string barrierToInternetAccessInResidenceDescriptor = default(string), List<EdFiStudentEducationOrganizationAssociationCohortYear> cohortYears = default(List<EdFiStudentEducationOrganizationAssociationCohortYear>), List<EdFiStudentEducationOrganizationAssociationDisability> disabilities = default(List<EdFiStudentEducationOrganizationAssociationDisability>), List<EdFiStudentEducationOrganizationAssociationElectronicMail> electronicMails = default(List<EdFiStudentEducationOrganizationAssociationElectronicMail>), bool? hispanicLatinoEthnicity = default(bool?), List<EdFiStudentEducationOrganizationAssociationInternationalAddress> internationalAddresses = default(List<EdFiStudentEducationOrganizationAssociationInternationalAddress>), bool? internetAccessInResidence = default(bool?), string internetAccessTypeInResidenceDescriptor = default(string), string internetPerformanceInResidenceDescriptor = default(string), List<EdFiStudentEducationOrganizationAssociationLanguage> languages = default(List<EdFiStudentEducationOrganizationAssociationLanguage>), string limitedEnglishProficiencyDescriptor = default(string), string loginId = default(string), string primaryLearningDeviceAccessDescriptor = default(string), string primaryLearningDeviceAwayFromSchoolDescriptor = default(string), string primaryLearningDeviceProviderDescriptor = default(string), string profileThumbnail = default(string), List<EdFiStudentEducationOrganizationAssociationRace> races = default(List<EdFiStudentEducationOrganizationAssociationRace>), string sexDescriptor = default(string), List<EdFiStudentEducationOrganizationAssociationStudentCharacteristic> studentCharacteristics = default(List<EdFiStudentEducationOrganizationAssociationStudentCharacteristic>), List<EdFiStudentEducationOrganizationAssociationStudentIdentificationCode> studentIdentificationCodes = default(List<EdFiStudentEducationOrganizationAssociationStudentIdentificationCode>), List<EdFiStudentEducationOrganizationAssociationStudentIndicator> studentIndicators = default(List<EdFiStudentEducationOrganizationAssociationStudentIndicator>), List<EdFiStudentEducationOrganizationAssociationTelephone> telephones = default(List<EdFiStudentEducationOrganizationAssociationTelephone>), List<EdFiStudentEducationOrganizationAssociationTribalAffiliation> tribalAffiliations = default(List<EdFiStudentEducationOrganizationAssociationTribalAffiliation>), string etag = default(string), DateTime lastModifiedDate = default(DateTime))
        {
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiStudentEducationOrganizationAssociation and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiStudentEducationOrganizationAssociation and cannot be null");
            }
            this.StudentReference = studentReference;
            // to ensure "sexDescriptor" is required (not null)
            if (sexDescriptor == null)
            {
                throw new ArgumentNullException("sexDescriptor is a required property for EdFiStudentEducationOrganizationAssociation and cannot be null");
            }
            this.SexDescriptor = sexDescriptor;
            this.Id = id;
            this.Addresses = addresses;
            this.AncestryEthnicOrigins = ancestryEthnicOrigins;
            this.BarrierToInternetAccessInResidenceDescriptor = barrierToInternetAccessInResidenceDescriptor;
            this.CohortYears = cohortYears;
            this.Disabilities = disabilities;
            this.ElectronicMails = electronicMails;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.InternationalAddresses = internationalAddresses;
            this.InternetAccessInResidence = internetAccessInResidence;
            this.InternetAccessTypeInResidenceDescriptor = internetAccessTypeInResidenceDescriptor;
            this.InternetPerformanceInResidenceDescriptor = internetPerformanceInResidenceDescriptor;
            this.Languages = languages;
            this.LimitedEnglishProficiencyDescriptor = limitedEnglishProficiencyDescriptor;
            this.LoginId = loginId;
            this.PrimaryLearningDeviceAccessDescriptor = primaryLearningDeviceAccessDescriptor;
            this.PrimaryLearningDeviceAwayFromSchoolDescriptor = primaryLearningDeviceAwayFromSchoolDescriptor;
            this.PrimaryLearningDeviceProviderDescriptor = primaryLearningDeviceProviderDescriptor;
            this.ProfileThumbnail = profileThumbnail;
            this.Races = races;
            this.StudentCharacteristics = studentCharacteristics;
            this.StudentIdentificationCodes = studentIdentificationCodes;
            this.StudentIndicators = studentIndicators;
            this.Telephones = telephones;
            this.TribalAffiliations = tribalAffiliations;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</value>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationAddress> Addresses { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.</value>
        [DataMember(Name = "ancestryEthnicOrigins", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationAncestryEthnicOrigin> AncestryEthnicOrigins { get; set; }

        /// <summary>
        /// An indication of the barrier to having internet access in the student s primary place of residence.
        /// </summary>
        /// <value>An indication of the barrier to having internet access in the student s primary place of residence.</value>
        [DataMember(Name = "barrierToInternetAccessInResidenceDescriptor", EmitDefaultValue = true)]
        public string BarrierToInternetAccessInResidenceDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.</value>
        [DataMember(Name = "cohortYears", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationCohortYear> CohortYears { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as determined by evaluation(s) conducted by the education organization.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as determined by evaluation(s) conducted by the education organization.</value>
        [DataMember(Name = "disabilities", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationDisability> Disabilities { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name = "electronicMails", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [DataMember(Name = "hispanicLatinoEthnicity", EmitDefaultValue = true)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationInternationalAddresses. The set of elements that describes an international address.</value>
        [DataMember(Name = "internationalAddresses", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationInternationalAddress> InternationalAddresses { get; set; }

        /// <summary>
        /// An indication of whether the student is able to access the internet in their primary place of residence.
        /// </summary>
        /// <value>An indication of whether the student is able to access the internet in their primary place of residence.</value>
        [DataMember(Name = "internetAccessInResidence", EmitDefaultValue = true)]
        public bool? InternetAccessInResidence { get; set; }

        /// <summary>
        /// The primary type of internet service used in the student s primary place of residence.
        /// </summary>
        /// <value>The primary type of internet service used in the student s primary place of residence.</value>
        [DataMember(Name = "internetAccessTypeInResidenceDescriptor", EmitDefaultValue = true)]
        public string InternetAccessTypeInResidenceDescriptor { get; set; }

        /// <summary>
        /// An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence.
        /// </summary>
        /// <value>An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence.</value>
        [DataMember(Name = "internetPerformanceInResidenceDescriptor", EmitDefaultValue = true)]
        public string InternetPerformanceInResidenceDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-3 language codes.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-3 language codes.</value>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationLanguage> Languages { get; set; }

        /// <summary>
        /// An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
        /// </summary>
        /// <value>An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.</value>
        [DataMember(Name = "limitedEnglishProficiencyDescriptor", EmitDefaultValue = true)]
        public string LimitedEnglishProficiencyDescriptor { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [DataMember(Name = "loginId", EmitDefaultValue = true)]
        public string LoginId { get; set; }

        /// <summary>
        /// An indication of whether the primary learning device is shared or not shared with another individual.
        /// </summary>
        /// <value>An indication of whether the primary learning device is shared or not shared with another individual.</value>
        [DataMember(Name = "primaryLearningDeviceAccessDescriptor", EmitDefaultValue = true)]
        public string PrimaryLearningDeviceAccessDescriptor { get; set; }

        /// <summary>
        /// The type of device the student uses most often to complete learning activities away from school.
        /// </summary>
        /// <value>The type of device the student uses most often to complete learning activities away from school.</value>
        [DataMember(Name = "primaryLearningDeviceAwayFromSchoolDescriptor", EmitDefaultValue = true)]
        public string PrimaryLearningDeviceAwayFromSchoolDescriptor { get; set; }

        /// <summary>
        /// The provider of the primary learning device.
        /// </summary>
        /// <value>The provider of the primary learning device.</value>
        [DataMember(Name = "primaryLearningDeviceProviderDescriptor", EmitDefaultValue = true)]
        public string PrimaryLearningDeviceProviderDescriptor { get; set; }

        /// <summary>
        /// Locator reference for the student photo. The specification for that reference is left to local definition.
        /// </summary>
        /// <value>Locator reference for the student photo. The specification for that reference is left to local definition.</value>
        [DataMember(Name = "profileThumbnail", EmitDefaultValue = true)]
        public string ProfileThumbnail { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies as last reported to the education organization. The data model allows for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies as last reported to the education organization. The data model allows for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name = "races", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationRace> Races { get; set; }

        /// <summary>
        /// The student&#39;s gender as last reported to the education organization.
        /// </summary>
        /// <value>The student&#39;s gender as last reported to the education organization.</value>
        [DataMember(Name = "sexDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationStudentCharacteristics. Reflects important characteristics of a student. If a student has a characteristic present, that characteristic is considered true or active for that student. If a characteristic is not present, no assumption is made as to the applicability of the characteristic, but local policy may dictate otherwise.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationStudentCharacteristics. Reflects important characteristics of a student. If a student has a characteristic present, that characteristic is considered true or active for that student. If a characteristic is not present, no assumption is made as to the applicability of the characteristic, but local policy may dictate otherwise.</value>
        [DataMember(Name = "studentCharacteristics", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationStudentCharacteristic> StudentCharacteristics { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.</value>
        [DataMember(Name = "studentIdentificationCodes", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationStudentIdentificationCode> StudentIdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationStudentIndicators. An indicator or metric computed for the student (e.g., at risk).
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationStudentIndicators. An indicator or metric computed for the student (e.g., at risk).</value>
        [DataMember(Name = "studentIndicators", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationStudentIndicator> StudentIndicators { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name = "telephones", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationTelephone> Telephones { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationTribalAffiliations. An American Indian tribe with which the student is affiliated as last reported to the education organization.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationTribalAffiliations. An American Indian tribe with which the student is affiliated as last reported to the education organization.</value>
        [DataMember(Name = "tribalAffiliations", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationTribalAffiliation> TribalAffiliations { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  AncestryEthnicOrigins: ").Append(AncestryEthnicOrigins).Append("\n");
            sb.Append("  BarrierToInternetAccessInResidenceDescriptor: ").Append(BarrierToInternetAccessInResidenceDescriptor).Append("\n");
            sb.Append("  CohortYears: ").Append(CohortYears).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  InternetAccessInResidence: ").Append(InternetAccessInResidence).Append("\n");
            sb.Append("  InternetAccessTypeInResidenceDescriptor: ").Append(InternetAccessTypeInResidenceDescriptor).Append("\n");
            sb.Append("  InternetPerformanceInResidenceDescriptor: ").Append(InternetPerformanceInResidenceDescriptor).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LimitedEnglishProficiencyDescriptor: ").Append(LimitedEnglishProficiencyDescriptor).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  PrimaryLearningDeviceAccessDescriptor: ").Append(PrimaryLearningDeviceAccessDescriptor).Append("\n");
            sb.Append("  PrimaryLearningDeviceAwayFromSchoolDescriptor: ").Append(PrimaryLearningDeviceAwayFromSchoolDescriptor).Append("\n");
            sb.Append("  PrimaryLearningDeviceProviderDescriptor: ").Append(PrimaryLearningDeviceProviderDescriptor).Append("\n");
            sb.Append("  ProfileThumbnail: ").Append(ProfileThumbnail).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  StudentCharacteristics: ").Append(StudentCharacteristics).Append("\n");
            sb.Append("  StudentIdentificationCodes: ").Append(StudentIdentificationCodes).Append("\n");
            sb.Append("  StudentIndicators: ").Append(StudentIndicators).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  TribalAffiliations: ").Append(TribalAffiliations).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentEducationOrganizationAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStudentEducationOrganizationAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentEducationOrganizationAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentEducationOrganizationAssociation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.AncestryEthnicOrigins == input.AncestryEthnicOrigins ||
                    this.AncestryEthnicOrigins != null &&
                    input.AncestryEthnicOrigins != null &&
                    this.AncestryEthnicOrigins.SequenceEqual(input.AncestryEthnicOrigins)
                ) && 
                (
                    this.BarrierToInternetAccessInResidenceDescriptor == input.BarrierToInternetAccessInResidenceDescriptor ||
                    (this.BarrierToInternetAccessInResidenceDescriptor != null &&
                    this.BarrierToInternetAccessInResidenceDescriptor.Equals(input.BarrierToInternetAccessInResidenceDescriptor))
                ) && 
                (
                    this.CohortYears == input.CohortYears ||
                    this.CohortYears != null &&
                    input.CohortYears != null &&
                    this.CohortYears.SequenceEqual(input.CohortYears)
                ) && 
                (
                    this.Disabilities == input.Disabilities ||
                    this.Disabilities != null &&
                    input.Disabilities != null &&
                    this.Disabilities.SequenceEqual(input.Disabilities)
                ) && 
                (
                    this.ElectronicMails == input.ElectronicMails ||
                    this.ElectronicMails != null &&
                    input.ElectronicMails != null &&
                    this.ElectronicMails.SequenceEqual(input.ElectronicMails)
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (this.HispanicLatinoEthnicity != null &&
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) && 
                (
                    this.InternationalAddresses == input.InternationalAddresses ||
                    this.InternationalAddresses != null &&
                    input.InternationalAddresses != null &&
                    this.InternationalAddresses.SequenceEqual(input.InternationalAddresses)
                ) && 
                (
                    this.InternetAccessInResidence == input.InternetAccessInResidence ||
                    (this.InternetAccessInResidence != null &&
                    this.InternetAccessInResidence.Equals(input.InternetAccessInResidence))
                ) && 
                (
                    this.InternetAccessTypeInResidenceDescriptor == input.InternetAccessTypeInResidenceDescriptor ||
                    (this.InternetAccessTypeInResidenceDescriptor != null &&
                    this.InternetAccessTypeInResidenceDescriptor.Equals(input.InternetAccessTypeInResidenceDescriptor))
                ) && 
                (
                    this.InternetPerformanceInResidenceDescriptor == input.InternetPerformanceInResidenceDescriptor ||
                    (this.InternetPerformanceInResidenceDescriptor != null &&
                    this.InternetPerformanceInResidenceDescriptor.Equals(input.InternetPerformanceInResidenceDescriptor))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.LimitedEnglishProficiencyDescriptor == input.LimitedEnglishProficiencyDescriptor ||
                    (this.LimitedEnglishProficiencyDescriptor != null &&
                    this.LimitedEnglishProficiencyDescriptor.Equals(input.LimitedEnglishProficiencyDescriptor))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.PrimaryLearningDeviceAccessDescriptor == input.PrimaryLearningDeviceAccessDescriptor ||
                    (this.PrimaryLearningDeviceAccessDescriptor != null &&
                    this.PrimaryLearningDeviceAccessDescriptor.Equals(input.PrimaryLearningDeviceAccessDescriptor))
                ) && 
                (
                    this.PrimaryLearningDeviceAwayFromSchoolDescriptor == input.PrimaryLearningDeviceAwayFromSchoolDescriptor ||
                    (this.PrimaryLearningDeviceAwayFromSchoolDescriptor != null &&
                    this.PrimaryLearningDeviceAwayFromSchoolDescriptor.Equals(input.PrimaryLearningDeviceAwayFromSchoolDescriptor))
                ) && 
                (
                    this.PrimaryLearningDeviceProviderDescriptor == input.PrimaryLearningDeviceProviderDescriptor ||
                    (this.PrimaryLearningDeviceProviderDescriptor != null &&
                    this.PrimaryLearningDeviceProviderDescriptor.Equals(input.PrimaryLearningDeviceProviderDescriptor))
                ) && 
                (
                    this.ProfileThumbnail == input.ProfileThumbnail ||
                    (this.ProfileThumbnail != null &&
                    this.ProfileThumbnail.Equals(input.ProfileThumbnail))
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    input.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.StudentCharacteristics == input.StudentCharacteristics ||
                    this.StudentCharacteristics != null &&
                    input.StudentCharacteristics != null &&
                    this.StudentCharacteristics.SequenceEqual(input.StudentCharacteristics)
                ) && 
                (
                    this.StudentIdentificationCodes == input.StudentIdentificationCodes ||
                    this.StudentIdentificationCodes != null &&
                    input.StudentIdentificationCodes != null &&
                    this.StudentIdentificationCodes.SequenceEqual(input.StudentIdentificationCodes)
                ) && 
                (
                    this.StudentIndicators == input.StudentIndicators ||
                    this.StudentIndicators != null &&
                    input.StudentIndicators != null &&
                    this.StudentIndicators.SequenceEqual(input.StudentIndicators)
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    input.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.TribalAffiliations == input.TribalAffiliations ||
                    this.TribalAffiliations != null &&
                    input.TribalAffiliations != null &&
                    this.TribalAffiliations.SequenceEqual(input.TribalAffiliations)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.EducationOrganizationReference != null)
                {
                    hashCode = (hashCode * 59) + this.EducationOrganizationReference.GetHashCode();
                }
                if (this.StudentReference != null)
                {
                    hashCode = (hashCode * 59) + this.StudentReference.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                if (this.AncestryEthnicOrigins != null)
                {
                    hashCode = (hashCode * 59) + this.AncestryEthnicOrigins.GetHashCode();
                }
                if (this.BarrierToInternetAccessInResidenceDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.BarrierToInternetAccessInResidenceDescriptor.GetHashCode();
                }
                if (this.CohortYears != null)
                {
                    hashCode = (hashCode * 59) + this.CohortYears.GetHashCode();
                }
                if (this.Disabilities != null)
                {
                    hashCode = (hashCode * 59) + this.Disabilities.GetHashCode();
                }
                if (this.ElectronicMails != null)
                {
                    hashCode = (hashCode * 59) + this.ElectronicMails.GetHashCode();
                }
                if (this.HispanicLatinoEthnicity != null)
                {
                    hashCode = (hashCode * 59) + this.HispanicLatinoEthnicity.GetHashCode();
                }
                if (this.InternationalAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.InternationalAddresses.GetHashCode();
                }
                if (this.InternetAccessInResidence != null)
                {
                    hashCode = (hashCode * 59) + this.InternetAccessInResidence.GetHashCode();
                }
                if (this.InternetAccessTypeInResidenceDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.InternetAccessTypeInResidenceDescriptor.GetHashCode();
                }
                if (this.InternetPerformanceInResidenceDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.InternetPerformanceInResidenceDescriptor.GetHashCode();
                }
                if (this.Languages != null)
                {
                    hashCode = (hashCode * 59) + this.Languages.GetHashCode();
                }
                if (this.LimitedEnglishProficiencyDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.LimitedEnglishProficiencyDescriptor.GetHashCode();
                }
                if (this.LoginId != null)
                {
                    hashCode = (hashCode * 59) + this.LoginId.GetHashCode();
                }
                if (this.PrimaryLearningDeviceAccessDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryLearningDeviceAccessDescriptor.GetHashCode();
                }
                if (this.PrimaryLearningDeviceAwayFromSchoolDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryLearningDeviceAwayFromSchoolDescriptor.GetHashCode();
                }
                if (this.PrimaryLearningDeviceProviderDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryLearningDeviceProviderDescriptor.GetHashCode();
                }
                if (this.ProfileThumbnail != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileThumbnail.GetHashCode();
                }
                if (this.Races != null)
                {
                    hashCode = (hashCode * 59) + this.Races.GetHashCode();
                }
                if (this.SexDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.SexDescriptor.GetHashCode();
                }
                if (this.StudentCharacteristics != null)
                {
                    hashCode = (hashCode * 59) + this.StudentCharacteristics.GetHashCode();
                }
                if (this.StudentIdentificationCodes != null)
                {
                    hashCode = (hashCode * 59) + this.StudentIdentificationCodes.GetHashCode();
                }
                if (this.StudentIndicators != null)
                {
                    hashCode = (hashCode * 59) + this.StudentIndicators.GetHashCode();
                }
                if (this.Telephones != null)
                {
                    hashCode = (hashCode * 59) + this.Telephones.GetHashCode();
                }
                if (this.TribalAffiliations != null)
                {
                    hashCode = (hashCode * 59) + this.TribalAffiliations.GetHashCode();
                }
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BarrierToInternetAccessInResidenceDescriptor (string) maxLength
            if (this.BarrierToInternetAccessInResidenceDescriptor != null && this.BarrierToInternetAccessInResidenceDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BarrierToInternetAccessInResidenceDescriptor, length must be less than 306.", new [] { "BarrierToInternetAccessInResidenceDescriptor" });
            }

            // InternetAccessTypeInResidenceDescriptor (string) maxLength
            if (this.InternetAccessTypeInResidenceDescriptor != null && this.InternetAccessTypeInResidenceDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InternetAccessTypeInResidenceDescriptor, length must be less than 306.", new [] { "InternetAccessTypeInResidenceDescriptor" });
            }

            // InternetPerformanceInResidenceDescriptor (string) maxLength
            if (this.InternetPerformanceInResidenceDescriptor != null && this.InternetPerformanceInResidenceDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InternetPerformanceInResidenceDescriptor, length must be less than 306.", new [] { "InternetPerformanceInResidenceDescriptor" });
            }

            // LimitedEnglishProficiencyDescriptor (string) maxLength
            if (this.LimitedEnglishProficiencyDescriptor != null && this.LimitedEnglishProficiencyDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LimitedEnglishProficiencyDescriptor, length must be less than 306.", new [] { "LimitedEnglishProficiencyDescriptor" });
            }

            // LoginId (string) maxLength
            if (this.LoginId != null && this.LoginId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginId, length must be less than 60.", new [] { "LoginId" });
            }

            // LoginId (string) minLength
            if (this.LoginId != null && this.LoginId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginId, length must be greater than 1.", new [] { "LoginId" });
            }

            // PrimaryLearningDeviceAccessDescriptor (string) maxLength
            if (this.PrimaryLearningDeviceAccessDescriptor != null && this.PrimaryLearningDeviceAccessDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryLearningDeviceAccessDescriptor, length must be less than 306.", new [] { "PrimaryLearningDeviceAccessDescriptor" });
            }

            // PrimaryLearningDeviceAwayFromSchoolDescriptor (string) maxLength
            if (this.PrimaryLearningDeviceAwayFromSchoolDescriptor != null && this.PrimaryLearningDeviceAwayFromSchoolDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryLearningDeviceAwayFromSchoolDescriptor, length must be less than 306.", new [] { "PrimaryLearningDeviceAwayFromSchoolDescriptor" });
            }

            // PrimaryLearningDeviceProviderDescriptor (string) maxLength
            if (this.PrimaryLearningDeviceProviderDescriptor != null && this.PrimaryLearningDeviceProviderDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryLearningDeviceProviderDescriptor, length must be less than 306.", new [] { "PrimaryLearningDeviceProviderDescriptor" });
            }

            // ProfileThumbnail (string) maxLength
            if (this.ProfileThumbnail != null && this.ProfileThumbnail.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProfileThumbnail, length must be less than 255.", new [] { "ProfileThumbnail" });
            }

            // ProfileThumbnail (string) minLength
            if (this.ProfileThumbnail != null && this.ProfileThumbnail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProfileThumbnail, length must be greater than 1.", new [] { "ProfileThumbnail" });
            }

            // SexDescriptor (string) maxLength
            if (this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            yield break;
        }
    }

}
