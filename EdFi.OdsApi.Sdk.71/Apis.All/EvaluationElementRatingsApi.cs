/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdFi.OdsApi.Sdk.Client;
using EdFi.OdsApi.Sdk.Client.Auth;
using EdFi.OdsApi.Sdk.Models.All;

namespace EdFi.OdsApi.Sdk.Apis.All
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEvaluationElementRatingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteEvaluationElementRatingById(string id, string? ifMatch = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEvaluationElementRatingByIdWithHttpInfo(string id, string? ifMatch = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TrackedChangesTpdmEvaluationElementRatingDelete&gt;</returns>
        List<TrackedChangesTpdmEvaluationElementRatingDelete> DeletesEvaluationElementRatings(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TrackedChangesTpdmEvaluationElementRatingDelete&gt;</returns>
        ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingDelete>> DeletesEvaluationElementRatingsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="areaOfRefinement">Area identified for person to refine or improve as part of the evaluation. (optional)</param>
        /// <param name="areaOfReinforcement">Area identified for reinforcement or positive feedback as part of the evaluation. (optional)</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured. (optional)</param>
        /// <param name="feedback">Feedback provided to the evaluated person. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TpdmEvaluationElementRating&gt;</returns>
        List<TpdmEvaluationElementRating> GetEvaluationElementRatings(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), long? educationOrganizationId = default(long?), string? evaluationElementTitle = default(string?), string? evaluationObjectiveTitle = default(string?), string? evaluationPeriodDescriptor = default(string?), string? evaluationTitle = default(string?), string? performanceEvaluationTitle = default(string?), string? performanceEvaluationTypeDescriptor = default(string?), int? schoolYear = default(int?), string? termDescriptor = default(string?), DateTime? evaluationDate = default(DateTime?), string? personId = default(string?), string? sourceSystemDescriptor = default(string?), string? evaluationElementRatingLevelDescriptor = default(string?), string? areaOfRefinement = default(string?), string? areaOfReinforcement = default(string?), string? comments = default(string?), string? feedback = default(string?), string? id = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="areaOfRefinement">Area identified for person to refine or improve as part of the evaluation. (optional)</param>
        /// <param name="areaOfReinforcement">Area identified for reinforcement or positive feedback as part of the evaluation. (optional)</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured. (optional)</param>
        /// <param name="feedback">Feedback provided to the evaluated person. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TpdmEvaluationElementRating&gt;</returns>
        ApiResponse<List<TpdmEvaluationElementRating>> GetEvaluationElementRatingsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), long? educationOrganizationId = default(long?), string? evaluationElementTitle = default(string?), string? evaluationObjectiveTitle = default(string?), string? evaluationPeriodDescriptor = default(string?), string? evaluationTitle = default(string?), string? performanceEvaluationTitle = default(string?), string? performanceEvaluationTypeDescriptor = default(string?), int? schoolYear = default(int?), string? termDescriptor = default(string?), DateTime? evaluationDate = default(DateTime?), string? personId = default(string?), string? sourceSystemDescriptor = default(string?), string? evaluationElementRatingLevelDescriptor = default(string?), string? areaOfRefinement = default(string?), string? areaOfReinforcement = default(string?), string? comments = default(string?), string? feedback = default(string?), string? id = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TpdmEvaluationElementRating</returns>
        TpdmEvaluationElementRating GetEvaluationElementRatingsById(string id, string? ifNoneMatch = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TpdmEvaluationElementRating</returns>
        ApiResponse<TpdmEvaluationElementRating> GetEvaluationElementRatingsByIdWithHttpInfo(string id, string? ifNoneMatch = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TrackedChangesTpdmEvaluationElementRatingKeyChange&gt;</returns>
        List<TrackedChangesTpdmEvaluationElementRatingKeyChange> KeyChangesEvaluationElementRatings(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TrackedChangesTpdmEvaluationElementRatingKeyChange&gt;</returns>
        ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>> KeyChangesEvaluationElementRatingsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostEvaluationElementRating(TpdmEvaluationElementRating evaluationElementRating, int operationIndex = 0);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostEvaluationElementRatingWithHttpInfo(TpdmEvaluationElementRating evaluationElementRating, int operationIndex = 0);
        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PutEvaluationElementRating(string id, TpdmEvaluationElementRating evaluationElementRating, string? ifMatch = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutEvaluationElementRatingWithHttpInfo(string id, TpdmEvaluationElementRating evaluationElementRating, string? ifMatch = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEvaluationElementRatingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEvaluationElementRatingByIdAsync(string id, string? ifMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEvaluationElementRatingByIdWithHttpInfoAsync(string id, string? ifMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TrackedChangesTpdmEvaluationElementRatingDelete&gt;</returns>
        System.Threading.Tasks.Task<List<TrackedChangesTpdmEvaluationElementRatingDelete>> DeletesEvaluationElementRatingsAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedChangesTpdmEvaluationElementRatingDelete&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingDelete>>> DeletesEvaluationElementRatingsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="areaOfRefinement">Area identified for person to refine or improve as part of the evaluation. (optional)</param>
        /// <param name="areaOfReinforcement">Area identified for reinforcement or positive feedback as part of the evaluation. (optional)</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured. (optional)</param>
        /// <param name="feedback">Feedback provided to the evaluated person. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TpdmEvaluationElementRating&gt;</returns>
        System.Threading.Tasks.Task<List<TpdmEvaluationElementRating>> GetEvaluationElementRatingsAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), long? educationOrganizationId = default(long?), string? evaluationElementTitle = default(string?), string? evaluationObjectiveTitle = default(string?), string? evaluationPeriodDescriptor = default(string?), string? evaluationTitle = default(string?), string? performanceEvaluationTitle = default(string?), string? performanceEvaluationTypeDescriptor = default(string?), int? schoolYear = default(int?), string? termDescriptor = default(string?), DateTime? evaluationDate = default(DateTime?), string? personId = default(string?), string? sourceSystemDescriptor = default(string?), string? evaluationElementRatingLevelDescriptor = default(string?), string? areaOfRefinement = default(string?), string? areaOfReinforcement = default(string?), string? comments = default(string?), string? feedback = default(string?), string? id = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="areaOfRefinement">Area identified for person to refine or improve as part of the evaluation. (optional)</param>
        /// <param name="areaOfReinforcement">Area identified for reinforcement or positive feedback as part of the evaluation. (optional)</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured. (optional)</param>
        /// <param name="feedback">Feedback provided to the evaluated person. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TpdmEvaluationElementRating&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TpdmEvaluationElementRating>>> GetEvaluationElementRatingsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), long? educationOrganizationId = default(long?), string? evaluationElementTitle = default(string?), string? evaluationObjectiveTitle = default(string?), string? evaluationPeriodDescriptor = default(string?), string? evaluationTitle = default(string?), string? performanceEvaluationTitle = default(string?), string? performanceEvaluationTypeDescriptor = default(string?), int? schoolYear = default(int?), string? termDescriptor = default(string?), DateTime? evaluationDate = default(DateTime?), string? personId = default(string?), string? sourceSystemDescriptor = default(string?), string? evaluationElementRatingLevelDescriptor = default(string?), string? areaOfRefinement = default(string?), string? areaOfReinforcement = default(string?), string? comments = default(string?), string? feedback = default(string?), string? id = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TpdmEvaluationElementRating</returns>
        System.Threading.Tasks.Task<TpdmEvaluationElementRating> GetEvaluationElementRatingsByIdAsync(string id, string? ifNoneMatch = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TpdmEvaluationElementRating)</returns>
        System.Threading.Tasks.Task<ApiResponse<TpdmEvaluationElementRating>> GetEvaluationElementRatingsByIdWithHttpInfoAsync(string id, string? ifNoneMatch = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TrackedChangesTpdmEvaluationElementRatingKeyChange&gt;</returns>
        System.Threading.Tasks.Task<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>> KeyChangesEvaluationElementRatingsAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedChangesTpdmEvaluationElementRatingKeyChange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>>> KeyChangesEvaluationElementRatingsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostEvaluationElementRatingAsync(TpdmEvaluationElementRating evaluationElementRating, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostEvaluationElementRatingWithHttpInfoAsync(TpdmEvaluationElementRating evaluationElementRating, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutEvaluationElementRatingAsync(string id, TpdmEvaluationElementRating evaluationElementRating, string? ifMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutEvaluationElementRatingWithHttpInfoAsync(string id, TpdmEvaluationElementRating evaluationElementRating, string? ifMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEvaluationElementRatingsApi : IEvaluationElementRatingsApiSync, IEvaluationElementRatingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EvaluationElementRatingsApi : IEvaluationElementRatingsApi
    {
        private EdFi.OdsApi.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationElementRatingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EvaluationElementRatingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationElementRatingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EvaluationElementRatingsApi(string basePath)
        {
            this.Configuration = EdFi.OdsApi.Sdk.Client.Configuration.MergeConfigurations(
                EdFi.OdsApi.Sdk.Client.GlobalConfiguration.Instance,
                new EdFi.OdsApi.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdFi.OdsApi.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.OdsApi.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationElementRatingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EvaluationElementRatingsApi(EdFi.OdsApi.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdFi.OdsApi.Sdk.Client.Configuration.MergeConfigurations(
                EdFi.OdsApi.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdFi.OdsApi.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.OdsApi.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationElementRatingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EvaluationElementRatingsApi(EdFi.OdsApi.Sdk.Client.ISynchronousClient client, EdFi.OdsApi.Sdk.Client.IAsynchronousClient asyncClient, EdFi.OdsApi.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.OdsApi.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteEvaluationElementRatingById(string id, string? ifMatch = default(string?), int operationIndex = 0)
        {
            DeleteEvaluationElementRatingByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.OdsApi.Sdk.Client.ApiResponse<Object> DeleteEvaluationElementRatingByIdWithHttpInfo(string id, string? ifMatch = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling EvaluationElementRatingsApi->DeleteEvaluationElementRatingById");
            }

            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Match", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.DeleteEvaluationElementRatingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tpdm/evaluationElementRatings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEvaluationElementRatingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEvaluationElementRatingByIdAsync(string id, string? ifMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEvaluationElementRatingByIdWithHttpInfoAsync(id, ifMatch, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.OdsApi.Sdk.Client.ApiResponse<Object>> DeleteEvaluationElementRatingByIdWithHttpInfoAsync(string id, string? ifMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling EvaluationElementRatingsApi->DeleteEvaluationElementRatingById");
            }


            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Match", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.DeleteEvaluationElementRatingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tpdm/evaluationElementRatings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEvaluationElementRatingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TrackedChangesTpdmEvaluationElementRatingDelete&gt;</returns>
        public List<TrackedChangesTpdmEvaluationElementRatingDelete> DeletesEvaluationElementRatings(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0)
        {
            EdFi.OdsApi.Sdk.Client.ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingDelete>> localVarResponse = DeletesEvaluationElementRatingsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TrackedChangesTpdmEvaluationElementRatingDelete&gt;</returns>
        public EdFi.OdsApi.Sdk.Client.ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingDelete>> DeletesEvaluationElementRatingsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0)
        {
            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (totalCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "totalCount", totalCount));
            }
            if (useSnapshot != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Use-Snapshot", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(useSnapshot)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.DeletesEvaluationElementRatings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TrackedChangesTpdmEvaluationElementRatingDelete>>("/tpdm/evaluationElementRatings/deletes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletesEvaluationElementRatings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TrackedChangesTpdmEvaluationElementRatingDelete&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackedChangesTpdmEvaluationElementRatingDelete>> DeletesEvaluationElementRatingsAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.OdsApi.Sdk.Client.ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingDelete>> localVarResponse = await DeletesEvaluationElementRatingsWithHttpInfoAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedChangesTpdmEvaluationElementRatingDelete&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.OdsApi.Sdk.Client.ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingDelete>>> DeletesEvaluationElementRatingsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (totalCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "totalCount", totalCount));
            }
            if (useSnapshot != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Use-Snapshot", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(useSnapshot)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.DeletesEvaluationElementRatings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TrackedChangesTpdmEvaluationElementRatingDelete>>("/tpdm/evaluationElementRatings/deletes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletesEvaluationElementRatings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="areaOfRefinement">Area identified for person to refine or improve as part of the evaluation. (optional)</param>
        /// <param name="areaOfReinforcement">Area identified for reinforcement or positive feedback as part of the evaluation. (optional)</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured. (optional)</param>
        /// <param name="feedback">Feedback provided to the evaluated person. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TpdmEvaluationElementRating&gt;</returns>
        public List<TpdmEvaluationElementRating> GetEvaluationElementRatings(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), long? educationOrganizationId = default(long?), string? evaluationElementTitle = default(string?), string? evaluationObjectiveTitle = default(string?), string? evaluationPeriodDescriptor = default(string?), string? evaluationTitle = default(string?), string? performanceEvaluationTitle = default(string?), string? performanceEvaluationTypeDescriptor = default(string?), int? schoolYear = default(int?), string? termDescriptor = default(string?), DateTime? evaluationDate = default(DateTime?), string? personId = default(string?), string? sourceSystemDescriptor = default(string?), string? evaluationElementRatingLevelDescriptor = default(string?), string? areaOfRefinement = default(string?), string? areaOfReinforcement = default(string?), string? comments = default(string?), string? feedback = default(string?), string? id = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0)
        {
            EdFi.OdsApi.Sdk.Client.ApiResponse<List<TpdmEvaluationElementRating>> localVarResponse = GetEvaluationElementRatingsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, educationOrganizationId, evaluationElementTitle, evaluationObjectiveTitle, evaluationPeriodDescriptor, evaluationTitle, performanceEvaluationTitle, performanceEvaluationTypeDescriptor, schoolYear, termDescriptor, evaluationDate, personId, sourceSystemDescriptor, evaluationElementRatingLevelDescriptor, areaOfRefinement, areaOfReinforcement, comments, feedback, id, useSnapshot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="areaOfRefinement">Area identified for person to refine or improve as part of the evaluation. (optional)</param>
        /// <param name="areaOfReinforcement">Area identified for reinforcement or positive feedback as part of the evaluation. (optional)</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured. (optional)</param>
        /// <param name="feedback">Feedback provided to the evaluated person. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TpdmEvaluationElementRating&gt;</returns>
        public EdFi.OdsApi.Sdk.Client.ApiResponse<List<TpdmEvaluationElementRating>> GetEvaluationElementRatingsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), long? educationOrganizationId = default(long?), string? evaluationElementTitle = default(string?), string? evaluationObjectiveTitle = default(string?), string? evaluationPeriodDescriptor = default(string?), string? evaluationTitle = default(string?), string? performanceEvaluationTitle = default(string?), string? performanceEvaluationTypeDescriptor = default(string?), int? schoolYear = default(int?), string? termDescriptor = default(string?), DateTime? evaluationDate = default(DateTime?), string? personId = default(string?), string? sourceSystemDescriptor = default(string?), string? evaluationElementRatingLevelDescriptor = default(string?), string? areaOfRefinement = default(string?), string? areaOfReinforcement = default(string?), string? comments = default(string?), string? feedback = default(string?), string? id = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0)
        {
            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (totalCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "totalCount", totalCount));
            }
            if (educationOrganizationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "educationOrganizationId", educationOrganizationId));
            }
            if (evaluationElementTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationElementTitle", evaluationElementTitle));
            }
            if (evaluationObjectiveTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationObjectiveTitle", evaluationObjectiveTitle));
            }
            if (evaluationPeriodDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationPeriodDescriptor", evaluationPeriodDescriptor));
            }
            if (evaluationTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationTitle", evaluationTitle));
            }
            if (performanceEvaluationTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "performanceEvaluationTitle", performanceEvaluationTitle));
            }
            if (performanceEvaluationTypeDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "performanceEvaluationTypeDescriptor", performanceEvaluationTypeDescriptor));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (termDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "termDescriptor", termDescriptor));
            }
            if (evaluationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationDate", evaluationDate));
            }
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "personId", personId));
            }
            if (sourceSystemDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sourceSystemDescriptor", sourceSystemDescriptor));
            }
            if (evaluationElementRatingLevelDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationElementRatingLevelDescriptor", evaluationElementRatingLevelDescriptor));
            }
            if (areaOfRefinement != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "areaOfRefinement", areaOfRefinement));
            }
            if (areaOfReinforcement != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "areaOfReinforcement", areaOfReinforcement));
            }
            if (comments != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comments", comments));
            }
            if (feedback != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "feedback", feedback));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (useSnapshot != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Use-Snapshot", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(useSnapshot)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.GetEvaluationElementRatings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TpdmEvaluationElementRating>>("/tpdm/evaluationElementRatings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvaluationElementRatings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="areaOfRefinement">Area identified for person to refine or improve as part of the evaluation. (optional)</param>
        /// <param name="areaOfReinforcement">Area identified for reinforcement or positive feedback as part of the evaluation. (optional)</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured. (optional)</param>
        /// <param name="feedback">Feedback provided to the evaluated person. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TpdmEvaluationElementRating&gt;</returns>
        public async System.Threading.Tasks.Task<List<TpdmEvaluationElementRating>> GetEvaluationElementRatingsAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), long? educationOrganizationId = default(long?), string? evaluationElementTitle = default(string?), string? evaluationObjectiveTitle = default(string?), string? evaluationPeriodDescriptor = default(string?), string? evaluationTitle = default(string?), string? performanceEvaluationTitle = default(string?), string? performanceEvaluationTypeDescriptor = default(string?), int? schoolYear = default(int?), string? termDescriptor = default(string?), DateTime? evaluationDate = default(DateTime?), string? personId = default(string?), string? sourceSystemDescriptor = default(string?), string? evaluationElementRatingLevelDescriptor = default(string?), string? areaOfRefinement = default(string?), string? areaOfReinforcement = default(string?), string? comments = default(string?), string? feedback = default(string?), string? id = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.OdsApi.Sdk.Client.ApiResponse<List<TpdmEvaluationElementRating>> localVarResponse = await GetEvaluationElementRatingsWithHttpInfoAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, educationOrganizationId, evaluationElementTitle, evaluationObjectiveTitle, evaluationPeriodDescriptor, evaluationTitle, performanceEvaluationTitle, performanceEvaluationTypeDescriptor, schoolYear, termDescriptor, evaluationDate, personId, sourceSystemDescriptor, evaluationElementRatingLevelDescriptor, areaOfRefinement, areaOfReinforcement, comments, feedback, id, useSnapshot, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="areaOfRefinement">Area identified for person to refine or improve as part of the evaluation. (optional)</param>
        /// <param name="areaOfReinforcement">Area identified for reinforcement or positive feedback as part of the evaluation. (optional)</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured. (optional)</param>
        /// <param name="feedback">Feedback provided to the evaluated person. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TpdmEvaluationElementRating&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.OdsApi.Sdk.Client.ApiResponse<List<TpdmEvaluationElementRating>>> GetEvaluationElementRatingsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), long? educationOrganizationId = default(long?), string? evaluationElementTitle = default(string?), string? evaluationObjectiveTitle = default(string?), string? evaluationPeriodDescriptor = default(string?), string? evaluationTitle = default(string?), string? performanceEvaluationTitle = default(string?), string? performanceEvaluationTypeDescriptor = default(string?), int? schoolYear = default(int?), string? termDescriptor = default(string?), DateTime? evaluationDate = default(DateTime?), string? personId = default(string?), string? sourceSystemDescriptor = default(string?), string? evaluationElementRatingLevelDescriptor = default(string?), string? areaOfRefinement = default(string?), string? areaOfReinforcement = default(string?), string? comments = default(string?), string? feedback = default(string?), string? id = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (totalCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "totalCount", totalCount));
            }
            if (educationOrganizationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "educationOrganizationId", educationOrganizationId));
            }
            if (evaluationElementTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationElementTitle", evaluationElementTitle));
            }
            if (evaluationObjectiveTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationObjectiveTitle", evaluationObjectiveTitle));
            }
            if (evaluationPeriodDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationPeriodDescriptor", evaluationPeriodDescriptor));
            }
            if (evaluationTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationTitle", evaluationTitle));
            }
            if (performanceEvaluationTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "performanceEvaluationTitle", performanceEvaluationTitle));
            }
            if (performanceEvaluationTypeDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "performanceEvaluationTypeDescriptor", performanceEvaluationTypeDescriptor));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (termDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "termDescriptor", termDescriptor));
            }
            if (evaluationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationDate", evaluationDate));
            }
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "personId", personId));
            }
            if (sourceSystemDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sourceSystemDescriptor", sourceSystemDescriptor));
            }
            if (evaluationElementRatingLevelDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "evaluationElementRatingLevelDescriptor", evaluationElementRatingLevelDescriptor));
            }
            if (areaOfRefinement != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "areaOfRefinement", areaOfRefinement));
            }
            if (areaOfReinforcement != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "areaOfReinforcement", areaOfReinforcement));
            }
            if (comments != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comments", comments));
            }
            if (feedback != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "feedback", feedback));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (useSnapshot != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Use-Snapshot", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(useSnapshot)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.GetEvaluationElementRatings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TpdmEvaluationElementRating>>("/tpdm/evaluationElementRatings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvaluationElementRatings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TpdmEvaluationElementRating</returns>
        public TpdmEvaluationElementRating GetEvaluationElementRatingsById(string id, string? ifNoneMatch = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0)
        {
            EdFi.OdsApi.Sdk.Client.ApiResponse<TpdmEvaluationElementRating> localVarResponse = GetEvaluationElementRatingsByIdWithHttpInfo(id, ifNoneMatch, useSnapshot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TpdmEvaluationElementRating</returns>
        public EdFi.OdsApi.Sdk.Client.ApiResponse<TpdmEvaluationElementRating> GetEvaluationElementRatingsByIdWithHttpInfo(string id, string? ifNoneMatch = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling EvaluationElementRatingsApi->GetEvaluationElementRatingsById");
            }

            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (useSnapshot != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Use-Snapshot", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(useSnapshot)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.GetEvaluationElementRatingsById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TpdmEvaluationElementRating>("/tpdm/evaluationElementRatings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvaluationElementRatingsById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TpdmEvaluationElementRating</returns>
        public async System.Threading.Tasks.Task<TpdmEvaluationElementRating> GetEvaluationElementRatingsByIdAsync(string id, string? ifNoneMatch = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.OdsApi.Sdk.Client.ApiResponse<TpdmEvaluationElementRating> localVarResponse = await GetEvaluationElementRatingsByIdWithHttpInfoAsync(id, ifNoneMatch, useSnapshot, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TpdmEvaluationElementRating)</returns>
        public async System.Threading.Tasks.Task<EdFi.OdsApi.Sdk.Client.ApiResponse<TpdmEvaluationElementRating>> GetEvaluationElementRatingsByIdWithHttpInfoAsync(string id, string? ifNoneMatch = default(string?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling EvaluationElementRatingsApi->GetEvaluationElementRatingsById");
            }


            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (useSnapshot != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Use-Snapshot", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(useSnapshot)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.GetEvaluationElementRatingsById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TpdmEvaluationElementRating>("/tpdm/evaluationElementRatings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvaluationElementRatingsById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TrackedChangesTpdmEvaluationElementRatingKeyChange&gt;</returns>
        public List<TrackedChangesTpdmEvaluationElementRatingKeyChange> KeyChangesEvaluationElementRatings(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0)
        {
            EdFi.OdsApi.Sdk.Client.ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>> localVarResponse = KeyChangesEvaluationElementRatingsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TrackedChangesTpdmEvaluationElementRatingKeyChange&gt;</returns>
        public EdFi.OdsApi.Sdk.Client.ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>> KeyChangesEvaluationElementRatingsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0)
        {
            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (totalCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "totalCount", totalCount));
            }
            if (useSnapshot != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Use-Snapshot", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(useSnapshot)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.KeyChangesEvaluationElementRatings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>>("/tpdm/evaluationElementRatings/keyChanges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KeyChangesEvaluationElementRatings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TrackedChangesTpdmEvaluationElementRatingKeyChange&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>> KeyChangesEvaluationElementRatingsAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.OdsApi.Sdk.Client.ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>> localVarResponse = await KeyChangesEvaluationElementRatingsWithHttpInfoAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedChangesTpdmEvaluationElementRatingKeyChange&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.OdsApi.Sdk.Client.ApiResponse<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>>> KeyChangesEvaluationElementRatingsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), long? minChangeVersion = default(long?), long? maxChangeVersion = default(long?), bool? totalCount = default(bool?), bool? useSnapshot = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (totalCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToMultiMap("", "totalCount", totalCount));
            }
            if (useSnapshot != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Use-Snapshot", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(useSnapshot)); // header parameter
            }

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.KeyChangesEvaluationElementRatings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TrackedChangesTpdmEvaluationElementRatingKeyChange>>("/tpdm/evaluationElementRatings/keyChanges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KeyChangesEvaluationElementRatings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostEvaluationElementRating(TpdmEvaluationElementRating evaluationElementRating, int operationIndex = 0)
        {
            PostEvaluationElementRatingWithHttpInfo(evaluationElementRating);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.OdsApi.Sdk.Client.ApiResponse<Object> PostEvaluationElementRatingWithHttpInfo(TpdmEvaluationElementRating evaluationElementRating, int operationIndex = 0)
        {
            // verify the required parameter 'evaluationElementRating' is set
            if (evaluationElementRating == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'evaluationElementRating' when calling EvaluationElementRatingsApi->PostEvaluationElementRating");
            }

            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = evaluationElementRating;

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.PostEvaluationElementRating";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tpdm/evaluationElementRatings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEvaluationElementRating", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostEvaluationElementRatingAsync(TpdmEvaluationElementRating evaluationElementRating, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostEvaluationElementRatingWithHttpInfoAsync(evaluationElementRating, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.OdsApi.Sdk.Client.ApiResponse<Object>> PostEvaluationElementRatingWithHttpInfoAsync(TpdmEvaluationElementRating evaluationElementRating, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'evaluationElementRating' is set
            if (evaluationElementRating == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'evaluationElementRating' when calling EvaluationElementRatingsApi->PostEvaluationElementRating");
            }


            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = evaluationElementRating;

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.PostEvaluationElementRating";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tpdm/evaluationElementRatings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEvaluationElementRating", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PutEvaluationElementRating(string id, TpdmEvaluationElementRating evaluationElementRating, string? ifMatch = default(string?), int operationIndex = 0)
        {
            PutEvaluationElementRatingWithHttpInfo(id, evaluationElementRating, ifMatch);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.OdsApi.Sdk.Client.ApiResponse<Object> PutEvaluationElementRatingWithHttpInfo(string id, TpdmEvaluationElementRating evaluationElementRating, string? ifMatch = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling EvaluationElementRatingsApi->PutEvaluationElementRating");
            }

            // verify the required parameter 'evaluationElementRating' is set
            if (evaluationElementRating == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'evaluationElementRating' when calling EvaluationElementRatingsApi->PutEvaluationElementRating");
            }

            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Match", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            }
            localVarRequestOptions.Data = evaluationElementRating;

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.PutEvaluationElementRating";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/tpdm/evaluationElementRatings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutEvaluationElementRating", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutEvaluationElementRatingAsync(string id, TpdmEvaluationElementRating evaluationElementRating, string? ifMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutEvaluationElementRatingWithHttpInfoAsync(id, evaluationElementRating, ifMatch, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="evaluationElementRating">The JSON representation of the \&quot;evaluationElementRating\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.OdsApi.Sdk.Client.ApiResponse<Object>> PutEvaluationElementRatingWithHttpInfoAsync(string id, TpdmEvaluationElementRating evaluationElementRating, string? ifMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling EvaluationElementRatingsApi->PutEvaluationElementRating");
            }

            // verify the required parameter 'evaluationElementRating' is set
            if (evaluationElementRating == null)
            {
                throw new EdFi.OdsApi.Sdk.Client.ApiException(400, "Missing required parameter 'evaluationElementRating' when calling EvaluationElementRatingsApi->PutEvaluationElementRating");
            }


            EdFi.OdsApi.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.OdsApi.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.OdsApi.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Match", EdFi.OdsApi.Sdk.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            }
            localVarRequestOptions.Data = evaluationElementRating;

            localVarRequestOptions.Operation = "EvaluationElementRatingsApi.PutEvaluationElementRating";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/tpdm/evaluationElementRatings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutEvaluationElementRating", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
